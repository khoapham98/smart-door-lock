
smart_door_lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001834  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080019cc  080019cc  000029cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a8c  08001a8c  0000325c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001a8c  08001a8c  0000325c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001a8c  08001a8c  0000325c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a8c  08001a8c  00002a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a90  08001a90  00002a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  08001a94  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000025c  08001cf0  0000325c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08001cf0  00003294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000325c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c32  00000000  00000000  0000328c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e61  00000000  00000000  00005ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00006d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000330  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ac3  00000000  00000000  000074b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a9d  00000000  00000000  0001bf7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fc25  00000000  00000000  00021a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a163d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f14  00000000  00000000  000a1680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000a2594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000025c 	.word	0x2000025c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080019b4 	.word	0x080019b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000260 	.word	0x20000260
 80001d4:	080019b4 	.word	0x080019b4

080001d8 <MFRC522_IsValidUID>:
 * @param  uid_list: A 2D array to store registered UIDs
 * @return 1: The UID is authorized
 * 		   0: Otherwise
 */
uint8_t MFRC522_IsValidUID(uint8_t uid_list[][4])
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	uint8_t tmp[4] = {0};
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
	anticoll(tmp);
 80001e4:	f107 030c 	add.w	r3, r7, #12
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f9a8 	bl	800053e <anticoll>
	if (!UID_is_new(tmp, uid_list))
 80001ee:	f107 030c 	add.w	r3, r7, #12
 80001f2:	6879      	ldr	r1, [r7, #4]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f8df 	bl	80003b8 <UID_is_new>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d101      	bne.n	8000204 <MFRC522_IsValidUID+0x2c>
	{
		return 1;
 8000200:	2301      	movs	r3, #1
 8000202:	e000      	b.n	8000206 <MFRC522_IsValidUID+0x2e>
	}
	else
	{
		return 0;
 8000204:	2300      	movs	r3, #0
	}
}
 8000206:	4618      	mov	r0, r3
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MFRC522_RemoveUID>:
 * @param  uid_list: A 2D array to store registered UIDs
 * @return 1: if a UID was successfully removed
 * 		   0: if the UID was not found or the list is empty
 */
uint8_t MFRC522_RemoveUID(uint8_t uid_list[][4])
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	uint8_t tmp[4] = {0};
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
	anticoll(tmp);
 800021c:	f107 030c 	add.w	r3, r7, #12
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f98c 	bl	800053e <anticoll>
	if ((UID_is_new(tmp, uid_list)) || (uid_cnt == 0))
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f8c3 	bl	80003b8 <UID_is_new>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d103      	bne.n	8000240 <MFRC522_RemoveUID+0x30>
 8000238:	4b08      	ldr	r3, [pc, #32]	@ (800025c <MFRC522_RemoveUID+0x4c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d101      	bne.n	8000244 <MFRC522_RemoveUID+0x34>
	{
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e006      	b.n	8000252 <MFRC522_RemoveUID+0x42>
	}
	else
	{
		remove_UID(tmp, uid_list);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	6879      	ldr	r1, [r7, #4]
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f83c 	bl	80002c8 <remove_UID>
	}
	return 1;
 8000250:	2301      	movs	r3, #1
}
 8000252:	4618      	mov	r0, r3
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000278 	.word	0x20000278

08000260 <MFRC522_CheckAndStoreUID>:
 * @param  uid_list: A 2D array to store registered UIDs
 * @return 1: if a new UID was successfully stored
 * 		   0: if it already exists or the list is full
 */
uint8_t MFRC522_CheckAndStoreUID(uint8_t uid_list[][4])
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	uint8_t tmp[4] = {0};
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
	anticoll(tmp);
 800026c:	f107 030c 	add.w	r3, r7, #12
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f964 	bl	800053e <anticoll>
	if (UID_is_new(tmp, uid_list) && UID_list_is_NOT_full())
 8000276:	f107 030c 	add.w	r3, r7, #12
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f89b 	bl	80003b8 <UID_is_new>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d00c      	beq.n	80002a2 <MFRC522_CheckAndStoreUID+0x42>
 8000288:	f000 f8d0 	bl	800042c <UID_list_is_NOT_full>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d007      	beq.n	80002a2 <MFRC522_CheckAndStoreUID+0x42>
	{
		store_UID(tmp, uid_list);
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	6879      	ldr	r1, [r7, #4]
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f8d7 	bl	800044c <store_UID>
		return 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	e000      	b.n	80002a4 <MFRC522_CheckAndStoreUID+0x44>
	}
	return 0;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MFRC522_IsTagPresent>:
 * @brief  Checks whether an RFID tag/card is present near the reader
 * @return 1: The tag/card is near
 * 		   0: Otherwise
 */
uint8_t MFRC522_IsTagPresent()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	if (sendRequest(PICC_REQA) == MI_OK)
 80002b0:	2026      	movs	r0, #38	@ 0x26
 80002b2:	f000 f91a 	bl	80004ea <sendRequest>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d101      	bne.n	80002c0 <MFRC522_IsTagPresent+0x14>
	{
		return 1;
 80002bc:	2301      	movs	r3, #1
 80002be:	e000      	b.n	80002c2 <MFRC522_IsTagPresent+0x16>
	}
	else
	{
		return 0;
 80002c0:	2300      	movs	r3, #0
	}
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <remove_UID>:
/* ====== BCC & UID Management ====== */
static void remove_UID(uint8_t* rm, uint8_t src[][4])
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	int index = find_UID(rm, src);
 80002d2:	6839      	ldr	r1, [r7, #0]
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f000 f833 	bl	8000340 <find_UID>
 80002da:	4603      	mov	r3, r0
 80002dc:	60fb      	str	r3, [r7, #12]
	for (int r = index; r < uid_cnt; r++)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	e01b      	b.n	800031c <remove_UID+0x54>
	{
		for (int c = 0; c < 4; c++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]
 80002e8:	e012      	b.n	8000310 <remove_UID+0x48>
		{
			src[r][c] = src[r + 1][c];
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	683a      	ldr	r2, [r7, #0]
 80002f2:	18d1      	adds	r1, r2, r3
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	683a      	ldr	r2, [r7, #0]
 80002fa:	441a      	add	r2, r3
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	440b      	add	r3, r1
 8000300:	7819      	ldrb	r1, [r3, #0]
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	4413      	add	r3, r2
 8000306:	460a      	mov	r2, r1
 8000308:	701a      	strb	r2, [r3, #0]
		for (int c = 0; c < 4; c++)
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	3301      	adds	r3, #1
 800030e:	613b      	str	r3, [r7, #16]
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	2b03      	cmp	r3, #3
 8000314:	dde9      	ble.n	80002ea <remove_UID+0x22>
	for (int r = index; r < uid_cnt; r++)
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	3301      	adds	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	4b07      	ldr	r3, [pc, #28]	@ (800033c <remove_UID+0x74>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	461a      	mov	r2, r3
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	4293      	cmp	r3, r2
 8000326:	dbdd      	blt.n	80002e4 <remove_UID+0x1c>
		}
	}
	uid_cnt--;
 8000328:	4b04      	ldr	r3, [pc, #16]	@ (800033c <remove_UID+0x74>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	3b01      	subs	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	4b02      	ldr	r3, [pc, #8]	@ (800033c <remove_UID+0x74>)
 8000332:	701a      	strb	r2, [r3, #0]
}
 8000334:	bf00      	nop
 8000336:	3718      	adds	r7, #24
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000278 	.word	0x20000278

08000340 <find_UID>:

static uint8_t find_UID(uint8_t* _rm, uint8_t _src[][4])
{
 8000340:	b480      	push	{r7}
 8000342:	b087      	sub	sp, #28
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
	int r = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]
	for (; r < uid_cnt; r++)
 800034e:	e020      	b.n	8000392 <find_UID+0x52>
	{
		int found = 1;
 8000350:	2301      	movs	r3, #1
 8000352:	613b      	str	r3, [r7, #16]
		for (int c = 0; c < 4; c++)
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	e012      	b.n	8000380 <find_UID+0x40>
		{
			if (_rm[c] != _src[r][c])
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	4413      	add	r3, r2
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	6839      	ldr	r1, [r7, #0]
 8000368:	4419      	add	r1, r3
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	440b      	add	r3, r1
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	429a      	cmp	r2, r3
 8000372:	d002      	beq.n	800037a <find_UID+0x3a>
			{
				found = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	613b      	str	r3, [r7, #16]
				break;
 8000378:	e005      	b.n	8000386 <find_UID+0x46>
		for (int c = 0; c < 4; c++)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3301      	adds	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	2b03      	cmp	r3, #3
 8000384:	dde9      	ble.n	800035a <find_UID+0x1a>
			}
		}
		if (found) break;
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d109      	bne.n	80003a0 <find_UID+0x60>
	for (; r < uid_cnt; r++)
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	3301      	adds	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <find_UID+0x74>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	461a      	mov	r2, r3
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	4293      	cmp	r3, r2
 800039c:	dbd8      	blt.n	8000350 <find_UID+0x10>
 800039e:	e000      	b.n	80003a2 <find_UID+0x62>
		if (found) break;
 80003a0:	bf00      	nop
	}
	return r;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	b2db      	uxtb	r3, r3
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	371c      	adds	r7, #28
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000278 	.word	0x20000278

080003b8 <UID_is_new>:

static uint8_t UID_is_new(uint8_t* recv_buf, uint8_t uids[][4])
{
 80003b8:	b480      	push	{r7}
 80003ba:	b087      	sub	sp, #28
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	for (int r = 0; r < uid_cnt; r++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e022      	b.n	800040e <UID_is_new+0x56>
	{
		int uid_existed = 1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	613b      	str	r3, [r7, #16]
		for (int c = 0; c < 4; c++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	e012      	b.n	80003f8 <UID_is_new+0x40>
		{
			if (recv_buf[c] != uids[r][c])
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	6839      	ldr	r1, [r7, #0]
 80003e0:	4419      	add	r1, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	440b      	add	r3, r1
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d002      	beq.n	80003f2 <UID_is_new+0x3a>
			{
				uid_existed = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
				break;
 80003f0:	e005      	b.n	80003fe <UID_is_new+0x46>
		for (int c = 0; c < 4; c++)
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	3301      	adds	r3, #1
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	dde9      	ble.n	80003d2 <UID_is_new+0x1a>
			}
		}
		if (uid_existed) return 0;
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <UID_is_new+0x50>
 8000404:	2300      	movs	r3, #0
 8000406:	e009      	b.n	800041c <UID_is_new+0x64>
	for (int r = 0; r < uid_cnt; r++)
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	3301      	adds	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <UID_is_new+0x70>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	461a      	mov	r2, r3
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	4293      	cmp	r3, r2
 8000418:	dbd6      	blt.n	80003c8 <UID_is_new+0x10>
	}
	return 1;
 800041a:	2301      	movs	r3, #1
}
 800041c:	4618      	mov	r0, r3
 800041e:	371c      	adds	r7, #28
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	20000278 	.word	0x20000278

0800042c <UID_list_is_NOT_full>:

static uint8_t UID_list_is_NOT_full()
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
	return (uid_cnt < (MAX_UIDs - 1)) ? 1 : 0;
 8000430:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <UID_list_is_NOT_full+0x1c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b02      	cmp	r3, #2
 8000436:	bf94      	ite	ls
 8000438:	2301      	movls	r3, #1
 800043a:	2300      	movhi	r3, #0
 800043c:	b2db      	uxtb	r3, r3
}
 800043e:	4618      	mov	r0, r3
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	20000278 	.word	0x20000278

0800044c <store_UID>:

static void store_UID(uint8_t* src, uint8_t dest[][4])
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 4; i++)
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	e00f      	b.n	800047c <store_UID+0x30>
	{
		dest[uid_cnt][i] = src[i];
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	4a0e      	ldr	r2, [pc, #56]	@ (800049c <store_UID+0x50>)
 8000464:	7812      	ldrb	r2, [r2, #0]
 8000466:	0092      	lsls	r2, r2, #2
 8000468:	6839      	ldr	r1, [r7, #0]
 800046a:	440a      	add	r2, r1
 800046c:	7819      	ldrb	r1, [r3, #0]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4413      	add	r3, r2
 8000472:	460a      	mov	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3301      	adds	r3, #1
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	2b03      	cmp	r3, #3
 8000480:	ddec      	ble.n	800045c <store_UID+0x10>
	}
	uid_cnt++;
 8000482:	4b06      	ldr	r3, [pc, #24]	@ (800049c <store_UID+0x50>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	3301      	adds	r3, #1
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4b04      	ldr	r3, [pc, #16]	@ (800049c <store_UID+0x50>)
 800048c:	701a      	strb	r2, [r3, #0]
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20000278 	.word	0x20000278

080004a0 <check_BCC>:

static uint8_t check_BCC(uint8_t* uid)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	uint8_t bcc = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 4; i++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	e009      	b.n	80004c6 <check_BCC+0x26>
	{
		bcc ^= uid[i];
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	4413      	add	r3, r2
 80004b8:	781a      	ldrb	r2, [r3, #0]
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	4053      	eors	r3, r2
 80004be:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 4; i++)
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	3301      	adds	r3, #1
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	ddf2      	ble.n	80004b2 <check_BCC+0x12>
	}
	return (bcc == uid[4]) ? MI_OK : MI_ERR;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3304      	adds	r3, #4
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	7bfa      	ldrb	r2, [r7, #15]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d101      	bne.n	80004dc <check_BCC+0x3c>
 80004d8:	2300      	movs	r3, #0
 80004da:	e000      	b.n	80004de <check_BCC+0x3e>
 80004dc:	2302      	movs	r3, #2
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <sendRequest>:
 * @param  TagType Buffer to store the 2-byte ATQA response
 * @return MI_OK : if a card is detected
 * 		   MI_ERR: otherwise
 */
static uint8_t sendRequest(uint8_t reqMode)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b086      	sub	sp, #24
 80004ee:	af02      	add	r7, sp, #8
 80004f0:	4603      	mov	r3, r0
 80004f2:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[2] = { 0 };
 80004f4:	2300      	movs	r3, #0
 80004f6:	81bb      	strh	r3, [r7, #12]
	uint8_t status;
	uint32_t backlen;
	ClearState();
 80004f8:	f000 f8f3 	bl	80006e2 <ClearState>
	write(BitFramingReg, 0x07);
 80004fc:	2107      	movs	r1, #7
 80004fe:	200d      	movs	r0, #13
 8000500:	f000 f9e0 	bl	80008c4 <write>
	tmp[0] = reqMode;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	733b      	strb	r3, [r7, #12]

	status = send2Card(PCD_TRANSCEIVE, tmp, 1, tmp, &backlen);
 8000508:	f107 020c 	add.w	r2, r7, #12
 800050c:	f107 010c 	add.w	r1, r7, #12
 8000510:	f107 0308 	add.w	r3, r7, #8
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	4613      	mov	r3, r2
 8000518:	2201      	movs	r2, #1
 800051a:	200c      	movs	r0, #12
 800051c:	f000 f84f 	bl	80005be <send2Card>
 8000520:	4603      	mov	r3, r0
 8000522:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backlen != 2))
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d102      	bne.n	8000530 <sendRequest+0x46>
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d001      	beq.n	8000534 <sendRequest+0x4a>
	{
		status = MI_ERR;
 8000530:	2302      	movs	r3, #2
 8000532:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <anticoll>:

static uint8_t anticoll(uint8_t* uid_out)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b08a      	sub	sp, #40	@ 0x28
 8000542:	af02      	add	r7, sp, #8
 8000544:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint32_t unLen;
    uint8_t cmd_buffer[2] = { PICC_ANTICOLL, 0x20 };
 8000546:	f242 0393 	movw	r3, #8339	@ 0x2093
 800054a:	823b      	strh	r3, [r7, #16]
    uint8_t recv_buffer[5];

    ClearState();
 800054c:	f000 f8c9 	bl	80006e2 <ClearState>
    write(BitFramingReg, 0x00);
 8000550:	2100      	movs	r1, #0
 8000552:	200d      	movs	r0, #13
 8000554:	f000 f9b6 	bl	80008c4 <write>

    status = send2Card(PCD_TRANSCEIVE, cmd_buffer, 2, recv_buffer, &unLen);
 8000558:	f107 0208 	add.w	r2, r7, #8
 800055c:	f107 0110 	add.w	r1, r7, #16
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	4613      	mov	r3, r2
 8000568:	2202      	movs	r2, #2
 800056a:	200c      	movs	r0, #12
 800056c:	f000 f827 	bl	80005be <send2Card>
 8000570:	4603      	mov	r3, r0
 8000572:	76fb      	strb	r3, [r7, #27]

    if (status == MI_OK && unLen == 5 && check_BCC(recv_buffer) == MI_OK)
 8000574:	7efb      	ldrb	r3, [r7, #27]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d11c      	bne.n	80005b4 <anticoll+0x76>
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	2b05      	cmp	r3, #5
 800057e:	d119      	bne.n	80005b4 <anticoll+0x76>
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff8b 	bl	80004a0 <check_BCC>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d111      	bne.n	80005b4 <anticoll+0x76>
    {
		for (int i = 0; i < 4; i++)
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
 8000594:	e00b      	b.n	80005ae <anticoll+0x70>
		{
			uid_out[i] = recv_buffer[i];
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	f107 0108 	add.w	r1, r7, #8
 80005a0:	69fa      	ldr	r2, [r7, #28]
 80005a2:	440a      	add	r2, r1
 80005a4:	7812      	ldrb	r2, [r2, #0]
 80005a6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++)
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	3301      	adds	r3, #1
 80005ac:	61fb      	str	r3, [r7, #28]
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	ddf0      	ble.n	8000596 <anticoll+0x58>
		}
    }

    return status;
 80005b4:	7efb      	ldrb	r3, [r7, #27]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <send2Card>:

/* ====== Core Communication ====== */
static uint8_t send2Card(uint8_t cmd, uint8_t* _data, uint8_t datalen, uint8_t* returnData, uint32_t* returnLen)
{
 80005be:	b590      	push	{r4, r7, lr}
 80005c0:	b089      	sub	sp, #36	@ 0x24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4603      	mov	r3, r0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	4613      	mov	r3, r2
 80005ce:	73bb      	strb	r3, [r7, #14]
	uint8_t irq = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	77fb      	strb	r3, [r7, #31]
	if (cmd == PCD_TRANSCEIVE) 		irq = 0x30;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b0c      	cmp	r3, #12
 80005d8:	d102      	bne.n	80005e0 <send2Card+0x22>
 80005da:	2330      	movs	r3, #48	@ 0x30
 80005dc:	77fb      	strb	r3, [r7, #31]
 80005de:	e004      	b.n	80005ea <send2Card+0x2c>
	else if (cmd == PCD_AUTHENT) 	irq = 0x10;
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2b0e      	cmp	r3, #14
 80005e4:	d101      	bne.n	80005ea <send2Card+0x2c>
 80005e6:	2310      	movs	r3, #16
 80005e8:	77fb      	strb	r3, [r7, #31]

	write(ComIEnReg, irq | 0x80); 	/* enable interrupt */
 80005ea:	7ffb      	ldrb	r3, [r7, #31]
 80005ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	2002      	movs	r0, #2
 80005f6:	f000 f965 	bl	80008c4 <write>
	write(ComIrqReg, 0x7F);			/* clear all interrupt flags */
 80005fa:	217f      	movs	r1, #127	@ 0x7f
 80005fc:	2004      	movs	r0, #4
 80005fe:	f000 f961 	bl	80008c4 <write>
	write(FIFOLevelReg, 0x80);		/* clear FIFO */
 8000602:	2180      	movs	r1, #128	@ 0x80
 8000604:	200a      	movs	r0, #10
 8000606:	f000 f95d 	bl	80008c4 <write>
	write(CommandReg, PCD_IDLE);
 800060a:	2100      	movs	r1, #0
 800060c:	2001      	movs	r0, #1
 800060e:	f000 f959 	bl	80008c4 <write>

	/* write data into FIFO */
	for (int i = 0; i < datalen; i++)
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
 8000616:	e00a      	b.n	800062e <send2Card+0x70>
	{
		write(FIFODataReg, _data[i]);
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	4413      	add	r3, r2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	2009      	movs	r0, #9
 8000624:	f000 f94e 	bl	80008c4 <write>
	for (int i = 0; i < datalen; i++)
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	3301      	adds	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	7bbb      	ldrb	r3, [r7, #14]
 8000630:	69ba      	ldr	r2, [r7, #24]
 8000632:	429a      	cmp	r2, r3
 8000634:	dbf0      	blt.n	8000618 <send2Card+0x5a>
	}

	/* send command */
	write(CommandReg, cmd);
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	4619      	mov	r1, r3
 800063a:	2001      	movs	r0, #1
 800063c:	f000 f942 	bl	80008c4 <write>
	if (cmd == PCD_TRANSCEIVE)
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b0c      	cmp	r3, #12
 8000644:	d103      	bne.n	800064e <send2Card+0x90>
	{
		SetBitMask(BitFramingReg, 0x80); /* start send data from FIFO */
 8000646:	2180      	movs	r1, #128	@ 0x80
 8000648:	200d      	movs	r0, #13
 800064a:	f000 f985 	bl	8000958 <SetBitMask>
	}

	uint16_t timeout = 10000;
 800064e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000652:	82fb      	strh	r3, [r7, #22]
	while (timeout-- && !(read(ComIrqReg) & irq));
 8000654:	bf00      	nop
 8000656:	8afb      	ldrh	r3, [r7, #22]
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	82fa      	strh	r2, [r7, #22]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d009      	beq.n	8000674 <send2Card+0xb6>
 8000660:	2004      	movs	r0, #4
 8000662:	f000 f945 	bl	80008f0 <read>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	7ffb      	ldrb	r3, [r7, #31]
 800066c:	4013      	ands	r3, r2
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f0      	beq.n	8000656 <send2Card+0x98>
	if (timeout == 0)
 8000674:	8afb      	ldrh	r3, [r7, #22]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <send2Card+0xc4>
	{
		ClearState();
 800067a:	f000 f832 	bl	80006e2 <ClearState>
		return MI_ERR;
 800067e:	2302      	movs	r3, #2
 8000680:	e02b      	b.n	80006da <send2Card+0x11c>
	}

	/* check for error */
	if (read(ErrorReg) & 0x1B)	{ return MI_ERR; }
 8000682:	2006      	movs	r0, #6
 8000684:	f000 f934 	bl	80008f0 <read>
 8000688:	4603      	mov	r3, r0
 800068a:	f003 031b 	and.w	r3, r3, #27
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <send2Card+0xd8>
 8000692:	2302      	movs	r3, #2
 8000694:	e021      	b.n	80006da <send2Card+0x11c>
	ClearBitMask(BitFramingReg, 0x80);
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	200d      	movs	r0, #13
 800069a:	f000 f93d 	bl	8000918 <ClearBitMask>

	/* receive data from tag */
	if (cmd == PCD_TRANSCEIVE)
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	2b0c      	cmp	r3, #12
 80006a2:	d119      	bne.n	80006d8 <send2Card+0x11a>
	{
		*returnLen = read(FIFOLevelReg);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 f923 	bl	80008f0 <read>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006b0:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < *returnLen; i++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	e00a      	b.n	80006ce <send2Card+0x110>
		{
			returnData[i] = read(FIFODataReg);
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	18d4      	adds	r4, r2, r3
 80006be:	2009      	movs	r0, #9
 80006c0:	f000 f916 	bl	80008f0 <read>
 80006c4:	4603      	mov	r3, r0
 80006c6:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < *returnLen; i++)
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d8ef      	bhi.n	80006b8 <send2Card+0xfa>
		}
	}
	return MI_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	@ 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd90      	pop	{r4, r7, pc}

080006e2 <ClearState>:

static void ClearState()
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
    write(CommandReg, PCD_IDLE);
 80006e6:	2100      	movs	r1, #0
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 f8eb 	bl	80008c4 <write>
    write(ComIrqReg, 0x7F);         // clear interrupt flags
 80006ee:	217f      	movs	r1, #127	@ 0x7f
 80006f0:	2004      	movs	r0, #4
 80006f2:	f000 f8e7 	bl	80008c4 <write>
    write(FIFOLevelReg, 0x80);      // clear FIFO
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	200a      	movs	r0, #10
 80006fa:	f000 f8e3 	bl	80008c4 <write>
    ClearBitMask(BitFramingReg, 0x07);      // clear bit framing
 80006fe:	2107      	movs	r1, #7
 8000700:	200d      	movs	r0, #13
 8000702:	f000 f909 	bl	8000918 <ClearBitMask>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <SPI_Receive>:

/* ====== SPI & Slave/Chip Select ===== */
static uint8_t SPI_Receive(uint8_t reg_addr)
{
 800070c:	b480      	push	{r7}
 800070e:	b087      	sub	sp, #28
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	uint8_t* SPI_DR = (uint8_t*) (SPI1_BASE_ADDR  + 0x0C);
 8000716:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <SPI_Receive+0xac>)
 8000718:	617b      	str	r3, [r7, #20]
	uint16_t* SPI_SR = (uint16_t*) (SPI1_BASE_ADDR  + 0x08);
 800071a:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <SPI_Receive+0xb0>)
 800071c:	613b      	str	r3, [r7, #16]

	/* data send sequence */
	while (((*SPI_SR >> 1) & 1) == 0);	/* wait until the TX buffer is empty */
 800071e:	bf00      	nop
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	085b      	lsrs	r3, r3, #1
 8000726:	b29b      	uxth	r3, r3
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f7      	beq.n	8000720 <SPI_Receive+0x14>
	*SPI_DR = READ | (reg_addr << 1);	/* send register address */
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	b25b      	sxtb	r3, r3
 8000738:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073c:	b25b      	sxtb	r3, r3
 800073e:	b2da      	uxtb	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	701a      	strb	r2, [r3, #0]
	while (((*SPI_SR >> 7) & 1) == 1);	/* wait until SPI is free */
 8000744:	bf00      	nop
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	09db      	lsrs	r3, r3, #7
 800074c:	b29b      	uxth	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f7      	bne.n	8000746 <SPI_Receive+0x3a>

	/* data read sequence */
	while ((*SPI_SR & 1) == 0);			/* wait until the RX buffer is not empty */
 8000756:	bf00      	nop
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0f9      	beq.n	8000758 <SPI_Receive+0x4c>
	uint8_t dummy = *SPI_DR;			/* read dummy data */
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	73fb      	strb	r3, [r7, #15]

	/* data send sequence */
	while (((*SPI_SR >> 1) & 1) == 0);	/* wait until the TX buffer is empty */
 800076a:	bf00      	nop
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	085b      	lsrs	r3, r3, #1
 8000772:	b29b      	uxth	r3, r3
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f7      	beq.n	800076c <SPI_Receive+0x60>
	*SPI_DR = 0x00;						/* send dummy address */
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
	while (((*SPI_SR >> 7) & 1) == 1);	/* wait until SPI is free */
 8000782:	bf00      	nop
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	09db      	lsrs	r3, r3, #7
 800078a:	b29b      	uxth	r3, r3
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f7      	bne.n	8000784 <SPI_Receive+0x78>

	/* data read sequence */
	while ((*SPI_SR & 1) == 0);			/* wait until the RX buffer is not empty */
 8000794:	bf00      	nop
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <SPI_Receive+0x8a>
	uint8_t data = *SPI_DR;				/* read data */
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	73bb      	strb	r3, [r7, #14]

	return data;
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	4001300c 	.word	0x4001300c
 80007bc:	40013008 	.word	0x40013008

080007c0 <SPI_Transmit>:

static void SPI_Transmit(uint8_t reg_addr, uint8_t _data)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
	uint8_t* SPI_DR = (uint8_t*) (SPI1_BASE_ADDR  + 0x0C);
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <SPI_Transmit+0xac>)
 80007d2:	617b      	str	r3, [r7, #20]
	uint16_t* SPI_SR = (uint16_t*) (SPI1_BASE_ADDR  + 0x08);
 80007d4:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <SPI_Transmit+0xb0>)
 80007d6:	613b      	str	r3, [r7, #16]

	/* data send sequence */
	while (((*SPI_SR >> 1) & 1) == 0);	/* wait until the TX buffer is empty */
 80007d8:	bf00      	nop
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	085b      	lsrs	r3, r3, #1
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f7      	beq.n	80007da <SPI_Transmit+0x1a>
	*SPI_DR = (reg_addr << 1) & WRITE;	/* send register address */
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	701a      	strb	r2, [r3, #0]
	while (((*SPI_SR >> 7) & 1) == 1);	/* wait until SPI is free */
 80007fa:	bf00      	nop
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	09db      	lsrs	r3, r3, #7
 8000802:	b29b      	uxth	r3, r3
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1f7      	bne.n	80007fc <SPI_Transmit+0x3c>

	/* data read sequence */
	while ((*SPI_SR & 1) == 0);			/* wait until the RX buffer is not empty */
 800080c:	bf00      	nop
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f9      	beq.n	800080e <SPI_Transmit+0x4e>
	uint8_t dummy = *SPI_DR;			/* read dummy data */
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	73fb      	strb	r3, [r7, #15]

	/* data send sequence */
	while (((*SPI_SR >> 1) & 1) == 0);	/* wait until the TX buffer is empty */
 8000820:	bf00      	nop
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	085b      	lsrs	r3, r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0f7      	beq.n	8000822 <SPI_Transmit+0x62>
	*SPI_DR = _data;						/* send dummy address */
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	701a      	strb	r2, [r3, #0]
	while (((*SPI_SR >> 7) & 1) == 1);	/* wait until SPI is free */
 8000838:	bf00      	nop
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	09db      	lsrs	r3, r3, #7
 8000840:	b29b      	uxth	r3, r3
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f7      	bne.n	800083a <SPI_Transmit+0x7a>

	/* data read sequence */
	while ((*SPI_SR & 1) == 0);			/* wait until the RX buffer is not empty */
 800084a:	bf00      	nop
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f9      	beq.n	800084c <SPI_Transmit+0x8c>
	dummy = *SPI_DR;					/* read dummy data */
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	73fb      	strb	r3, [r7, #15]
}
 800085e:	bf00      	nop
 8000860:	371c      	adds	r7, #28
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	4001300c 	.word	0x4001300c
 8000870:	40013008 	.word	0x40013008

08000874 <select_MFRC522>:

/**
 * brief  This function is used to select slave by pull SS to LOW
 */
static void select_MFRC522()
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
	uint32_t* GPIOB_ODR = (uint32_t*) (GPIOB_BASE_ADDR + 0x14);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <select_MFRC522+0x24>)
 800087c:	607b      	str	r3, [r7, #4]
	*GPIOB_ODR &= ~(1 << 6);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40020414 	.word	0x40020414

0800089c <NOT_select_MFRC522>:

/**
 * brief  This function is used to select slave by set SS to HIGH
 */
static void NOT_select_MFRC522()
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
	uint32_t* GPIOB_ODR = (uint32_t*) (GPIOB_BASE_ADDR + 0x14);
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <NOT_select_MFRC522+0x24>)
 80008a4:	607b      	str	r3, [r7, #4]
	*GPIOB_ODR |= 1 << 6;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40020414 	.word	0x40020414

080008c4 <write>:
 * @brief  This function is used to write 1 byte data into any register of MRFC522
 * @param  reg_address: address of the register to write data to
 * 		   data: data want to write
 */
static void write(uint8_t reg_address, uint8_t data)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	460a      	mov	r2, r1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	4613      	mov	r3, r2
 80008d2:	71bb      	strb	r3, [r7, #6]
	select_MFRC522();
 80008d4:	f7ff ffce 	bl	8000874 <select_MFRC522>
	SPI_Transmit(reg_address, data);
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff6e 	bl	80007c0 <SPI_Transmit>
	NOT_select_MFRC522();
 80008e4:	f7ff ffda 	bl	800089c <NOT_select_MFRC522>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <read>:
/**
 * @brief  This function is used to read 1 byte data from any register of MRFC522
 * @param  reg_address: address of the register to read data from
 */
static uint8_t read(uint8_t reg_address)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	select_MFRC522();
 80008fa:	f7ff ffbb 	bl	8000874 <select_MFRC522>
	uint8_t val = SPI_Receive(reg_address);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff03 	bl	800070c <SPI_Receive>
 8000906:	4603      	mov	r3, r0
 8000908:	73fb      	strb	r3, [r7, #15]
	NOT_select_MFRC522();
 800090a:	f7ff ffc7 	bl	800089c <NOT_select_MFRC522>
	return val;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <ClearBitMask>:

static void ClearBitMask(uint8_t reg_addr, uint8_t mask)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	460a      	mov	r2, r1
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = read(reg_addr);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ffe0 	bl	80008f0 <read>
 8000930:	4603      	mov	r3, r0
 8000932:	73fb      	strb	r3, [r7, #15]
    write(reg_addr, tmp & (~mask));  /* clear bit mask */
 8000934:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000938:	43db      	mvns	r3, r3
 800093a:	b25a      	sxtb	r2, r3
 800093c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000940:	4013      	ands	r3, r2
 8000942:	b25b      	sxtb	r3, r3
 8000944:	b2da      	uxtb	r2, r3
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ffba 	bl	80008c4 <write>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <SetBitMask>:

static void SetBitMask(uint8_t reg_addr, uint8_t mask)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = read(reg_addr);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ffc0 	bl	80008f0 <read>
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
    write(reg_addr, tmp | mask);  /* set bit mask */
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	4313      	orrs	r3, r2
 800097a:	b2da      	uxtb	r2, r3
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff9f 	bl	80008c4 <write>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <AntennaON>:
{
	ClearBitMask(TxControlReg, 0x03);
}

static void AntennaON()
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 8000992:	2103      	movs	r1, #3
 8000994:	2014      	movs	r0, #20
 8000996:	f7ff ffdf 	bl	8000958 <SetBitMask>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}

0800099e <MFRC522_Init>:
 * PB7	-> RST
 * GND	-> GND
 * VCC	-> 3V
 */
void MFRC522_Init()
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
	/* configure MFRC522 */
	write(CommandReg, 0x0F);	/* soft reset */
 80009a2:	210f      	movs	r1, #15
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff8d 	bl	80008c4 <write>
	write(TModeReg, 0x80);		/* auto-start */
 80009aa:	2180      	movs	r1, #128	@ 0x80
 80009ac:	202a      	movs	r0, #42	@ 0x2a
 80009ae:	f7ff ff89 	bl	80008c4 <write>
	write(TPrescalerReg, 0xA9);	/* f_timer = 13.56e6/(2 * A9h) ~= 39.882KHz -> T_timer ~= 25us */
 80009b2:	21a9      	movs	r1, #169	@ 0xa9
 80009b4:	202b      	movs	r0, #43	@ 0x2b
 80009b6:	f7ff ff85 	bl	80008c4 <write>
	write(TReloadRegH, 0x03); /* set reload value = 03E8h = 1000 */
 80009ba:	2103      	movs	r1, #3
 80009bc:	202c      	movs	r0, #44	@ 0x2c
 80009be:	f7ff ff81 	bl	80008c4 <write>
	write(TReloadRegL, 0xE8);
 80009c2:	21e8      	movs	r1, #232	@ 0xe8
 80009c4:	202d      	movs	r0, #45	@ 0x2d
 80009c6:	f7ff ff7d 	bl	80008c4 <write>
	write(TxASKReg, 0x40);		/* force 100% ASK */
 80009ca:	2140      	movs	r1, #64	@ 0x40
 80009cc:	2015      	movs	r0, #21
 80009ce:	f7ff ff79 	bl	80008c4 <write>
	write(ModeReg, 0x3D);
 80009d2:	213d      	movs	r1, #61	@ 0x3d
 80009d4:	2011      	movs	r0, #17
 80009d6:	f7ff ff75 	bl	80008c4 <write>
	AntennaON();
 80009da:	f7ff ffd8 	bl	800098e <AntennaON>
	delay_millisec(10);
 80009de:	200a      	movs	r0, #10
 80009e0:	f000 feb8 	bl	8001754 <delay_millisec>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SPI_Init>:

void SPI_Init()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
	AHB1_clock_enable(AHB1_GPIOB);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 f986 	bl	8000d00 <AHB1_clock_enable>
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 80009f4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab0 <SPI_Init+0xc8>)
 80009f6:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOB_ODR   = (uint32_t*) (GPIOB_BASE_ADDR + 0x14);
 80009f8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab4 <SPI_Init+0xcc>)
 80009fa:	60bb      	str	r3, [r7, #8]
	uint32_t* GPIOB_AFRL  = (uint32_t*) (GPIOB_BASE_ADDR + 0x20);
 80009fc:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab8 <SPI_Init+0xd0>)
 80009fe:	607b      	str	r3, [r7, #4]

	/* set PB6,7 as OUTPUT, PB3,4,5 as AF */
	*GPIOB_MODER &= ~(0x3ff << (3 * 2));
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000a08:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |= (0b10 << (3 * 2)) | (0b10 << (4 * 2)) | (0b10 << (5 * 2)) | (0b01 << (6 * 2)) | (0b01 << (7 * 2));
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f443 42b5 	orr.w	r2, r3, #23168	@ 0x5a80
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	601a      	str	r2, [r3, #0]

	/* pull NSS (PB6) and RST (PB7) to HIGH */
	*GPIOB_ODR |= (1 << 6) | (1 << 7);
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	601a      	str	r2, [r3, #0]

	/* select AF05 for PB3,4,5 */
	*GPIOB_AFRL &= ~( (0xf << (3 * 4)) | (0xf << (4 * 4)) | (0xf << (5 * 4)) );
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	6013      	str	r3, [r2, #0]
	*GPIOB_AFRL |= (5 << (3 * 4)) | (5 << (4 * 4)) | (5 << (5 * 4));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 8000a40:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	6013      	str	r3, [r2, #0]

	APB2_clock_enable(APB2_SPI1);
 8000a48:	200c      	movs	r0, #12
 8000a4a:	f000 f929 	bl	8000ca0 <APB2_clock_enable>
	uint16_t* SPI_CR1 = (uint16_t*) (SPI1_BASE_ADDR + 0x00);
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <SPI_Init+0xd4>)
 8000a50:	603b      	str	r3, [r7, #0]

	/* set STM32 as master */
	*SPI_CR1 |= 1 << 2;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	801a      	strh	r2, [r3, #0]

	/* set baud rate = 1Mbps (MRFC522 can handle up to 10Mbps) */
	*SPI_CR1 &= ~(0b111 << 3);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= 0b100 << 3;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	801a      	strh	r2, [r3, #0]

	/* software slave management */
	*SPI_CR1 |= 1 << 9;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= 1 << 8;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	801a      	strh	r2, [r3, #0]

	/* enable SPI */
	*SPI_CR1 |= 1 << 6;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	801a      	strh	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020414 	.word	0x40020414
 8000ab8:	40020420 	.word	0x40020420
 8000abc:	40013000 	.word	0x40013000

08000ac0 <delay_ms>:
#include "ssd1306.h"
#include "button.h"
uint8_t button_state = NORMAL;

static void delay_ms(uint32_t ms)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	for (uint32_t j = 0; j < ms; j++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e00c      	b.n	8000ae8 <delay_ms+0x28>
	{
		for (volatile uint32_t i = 0; i < 8000; i++);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	e002      	b.n	8000ada <delay_ms+0x1a>
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000ae0:	d3f8      	bcc.n	8000ad4 <delay_ms+0x14>
	for (uint32_t j = 0; j < ms; j++)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d3ee      	bcc.n	8000ace <delay_ms+0xe>
	}
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <isPressed>:

static uint8_t isPressed()
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
	uint32_t* GPIOB_IDR = (uint32_t*) (GPIOB_BASE_ADDR + 0x10);
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <isPressed+0x2c>)
 8000b08:	607b      	str	r3, [r7, #4]
	if (((*GPIOB_IDR >> 1) & 1) == 1)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	085b      	lsrs	r3, r3, #1
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <isPressed+0x1c>
	{
		return 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <isPressed+0x1e>
	}
	else
	{
		return 0;
 8000b1c:	2300      	movs	r3, #0
	}
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40020410 	.word	0x40020410

08000b30 <selectMODE>:

static uint8_t button_cnt = 0;
static uint8_t selectMODE()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
	uint8_t mode;
	int time = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	603b      	str	r3, [r7, #0]
	while (isPressed())
 8000b3a:	e00f      	b.n	8000b5c <selectMODE+0x2c>
	{
		button_cnt++;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <selectMODE+0x78>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <selectMODE+0x78>)
 8000b46:	701a      	strb	r2, [r3, #0]
		delay_ms(50);
 8000b48:	2032      	movs	r0, #50	@ 0x32
 8000b4a:	f7ff ffb9 	bl	8000ac0 <delay_ms>
		if (isPressed()) time = 2;
 8000b4e:	f7ff ffd7 	bl	8000b00 <isPressed>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <selectMODE+0x2c>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	603b      	str	r3, [r7, #0]
	while (isPressed())
 8000b5c:	f7ff ffd0 	bl	8000b00 <isPressed>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1ea      	bne.n	8000b3c <selectMODE+0xc>
	}

	if (button_cnt > 0 && button_cnt <= 4)
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <selectMODE+0x78>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00f      	beq.n	8000b8e <selectMODE+0x5e>
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <selectMODE+0x78>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d80b      	bhi.n	8000b8e <selectMODE+0x5e>
	{
		if (time == 1)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d102      	bne.n	8000b82 <selectMODE+0x52>
		{
			mode = ADD;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	71fb      	strb	r3, [r7, #7]
		if (time == 1)
 8000b80:	e008      	b.n	8000b94 <selectMODE+0x64>
		}
		else if (time == 2)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d105      	bne.n	8000b94 <selectMODE+0x64>
		{
			mode = REMOVE;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	71fb      	strb	r3, [r7, #7]
		if (time == 1)
 8000b8c:	e002      	b.n	8000b94 <selectMODE+0x64>
		}
	}
	else
	{
		mode = NORMAL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	e000      	b.n	8000b96 <selectMODE+0x66>
		if (time == 1)
 8000b94:	bf00      	nop
	}
	button_cnt = 0;
 8000b96:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <selectMODE+0x78>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
	return mode;
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000027a 	.word	0x2000027a

08000bac <EXTI1_IRQHandler>:
 * One click 	: Add UID
 * Double click : Remove UID
 * Press & hold : IDLE mode (open the door)
 */
void EXTI1_IRQHandler()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	uint32_t* EXTI_PR = (uint32_t*) (EXTI_BASE_ADDR + 0x14);
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <EXTI1_IRQHandler+0x68>)
 8000bb4:	607b      	str	r3, [r7, #4]
	button_state = selectMODE();
 8000bb6:	f7ff ffbb 	bl	8000b30 <selectMODE>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <EXTI1_IRQHandler+0x6c>)
 8000bc0:	701a      	strb	r2, [r3, #0]
	switch (button_state)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <EXTI1_IRQHandler+0x6c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d012      	beq.n	8000bf0 <EXTI1_IRQHandler+0x44>
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	dc16      	bgt.n	8000bfc <EXTI1_IRQHandler+0x50>
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <EXTI1_IRQHandler+0x2c>
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d006      	beq.n	8000be4 <EXTI1_IRQHandler+0x38>
			break;
		case REMOVE:
			SSD1306_print6x8(".REMOVE MODE.", PAGE0, 0x18);
			break;
		default:
			break;
 8000bd6:	e011      	b.n	8000bfc <EXTI1_IRQHandler+0x50>
			SSD1306_print6x8(".ACCESS MODE.", PAGE0, 0x18);
 8000bd8:	2218      	movs	r2, #24
 8000bda:	2100      	movs	r1, #0
 8000bdc:	480f      	ldr	r0, [pc, #60]	@ (8000c1c <EXTI1_IRQHandler+0x70>)
 8000bde:	f000 fb33 	bl	8001248 <SSD1306_print6x8>
			break;
 8000be2:	e00c      	b.n	8000bfe <EXTI1_IRQHandler+0x52>
			SSD1306_print6x8(".ENROLL MODE.", PAGE0, 0x18);
 8000be4:	2218      	movs	r2, #24
 8000be6:	2100      	movs	r1, #0
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <EXTI1_IRQHandler+0x74>)
 8000bea:	f000 fb2d 	bl	8001248 <SSD1306_print6x8>
			break;
 8000bee:	e006      	b.n	8000bfe <EXTI1_IRQHandler+0x52>
			SSD1306_print6x8(".REMOVE MODE.", PAGE0, 0x18);
 8000bf0:	2218      	movs	r2, #24
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <EXTI1_IRQHandler+0x78>)
 8000bf6:	f000 fb27 	bl	8001248 <SSD1306_print6x8>
			break;
 8000bfa:	e000      	b.n	8000bfe <EXTI1_IRQHandler+0x52>
			break;
 8000bfc:	bf00      	nop
	}
	*EXTI_PR |= 1 << 1;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f043 0202 	orr.w	r2, r3, #2
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40013c14 	.word	0x40013c14
 8000c18:	20000279 	.word	0x20000279
 8000c1c:	080019cc 	.word	0x080019cc
 8000c20:	080019dc 	.word	0x080019dc
 8000c24:	080019ec 	.word	0x080019ec

08000c28 <BUTTON_Init>:
 * PB1	-> OUT
 * GND	-> GND
 * VCC	-> 3V
 */
void BUTTON_Init()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
	APB2_clock_enable(APB2_SYSCFG);
 8000c2e:	200e      	movs	r0, #14
 8000c30:	f000 f836 	bl	8000ca0 <APB2_clock_enable>
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <BUTTON_Init+0x64>)
 8000c36:	617b      	str	r3, [r7, #20]
	uint32_t* EXTI_IMR    = (uint32_t*) (EXTI_BASE_ADDR  + 0x00);
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <BUTTON_Init+0x68>)
 8000c3a:	613b      	str	r3, [r7, #16]
	uint32_t* EXTI_RTSR   = (uint32_t*) (EXTI_BASE_ADDR  + 0x08);
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <BUTTON_Init+0x6c>)
 8000c3e:	60fb      	str	r3, [r7, #12]
	uint32_t* NVIC_ISER0  = (uint32_t*) (0xE000E100);
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <BUTTON_Init+0x70>)
 8000c42:	60bb      	str	r3, [r7, #8]
	uint32_t* SYSCFG_EXTICR1 = (uint32_t*) (SYSCFG_BASE_ADDR + 0x08);
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <BUTTON_Init+0x74>)
 8000c46:	607b      	str	r3, [r7, #4]

	/* configure PB1 as INPUT */
	*GPIOB_MODER &= ~(0b11 << (1 * 2));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f023 020c 	bic.w	r2, r3, #12
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	601a      	str	r2, [r3, #0]

	/* select Port B for EXTI interrupt line 1 */
	*SYSCFG_EXTICR1 |= (PB << 4);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f043 0210 	orr.w	r2, r3, #16
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	601a      	str	r2, [r3, #0]

	/* configure EXTI & NVIC */
	*EXTI_RTSR  |= (1 << 1);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f043 0202 	orr.w	r2, r3, #2
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	601a      	str	r2, [r3, #0]
	*EXTI_IMR   |= (1 << 1);
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f043 0202 	orr.w	r2, r3, #2
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	601a      	str	r2, [r3, #0]
	*NVIC_ISER0 |= (1 << 7);
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	bf00      	nop
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40013c00 	.word	0x40013c00
 8000c94:	40013c08 	.word	0x40013c08
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	40013808 	.word	0x40013808

08000ca0 <APB2_clock_enable>:
/**
 * @brief  enable 32MHz clock for APB2 peripheral
 * @param  peripheral: name of the APB2 peripheral you want enable clock
 */
void APB2_clock_enable(APB2_periph_t peripheral)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	uint32_t* RCC_APB2ENR = (uint32_t*) (RCC_BASE_ADDR + 0x44);
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <APB2_clock_enable+0x2c>)
 8000cac:	60fb      	str	r3, [r7, #12]
	*RCC_APB2ENR |= 1 << peripheral;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	79fa      	ldrb	r2, [r7, #7]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40023844 	.word	0x40023844

08000cd0 <APB1_clock_enable>:
/**
 * @brief  enable 32MHz clock for APB1 peripheral
 * @param  peripheral: name of the APB1 peripheral you want enable clock
 */
void APB1_clock_enable(APB1_periph_t peripheral)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	uint32_t* RCC_APB1ENR = (uint32_t*) (RCC_BASE_ADDR + 0x40);
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <APB1_clock_enable+0x2c>)
 8000cdc:	60fb      	str	r3, [r7, #12]
	*RCC_APB1ENR |= 1 << peripheral;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	431a      	orrs	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	40023840 	.word	0x40023840

08000d00 <AHB1_clock_enable>:
/**
 * @brief  enable 32MHz clock for AHB1 peripheral
 * @param  peripheral: name of the AHB1 peripheral you want enable clock
 */
void AHB1_clock_enable(AHB1_periph_t peripheral)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	uint32_t* RCC_AHB1ENR = (uint32_t*) (RCC_BASE_ADDR + 0x30);
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <AHB1_clock_enable+0x2c>)
 8000d0c:	60fb      	str	r3, [r7, #12]
	*RCC_AHB1ENR |= 1 << peripheral;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	601a      	str	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40023830 	.word	0x40023830

08000d30 <RCC_Init>:

/**
 * @brief  This function is used for configure SYSTEM CLOCK = 32MHz
 */
void RCC_Init()
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
	uint32_t* RCC_CR 	  = (uint32_t*) (RCC_BASE_ADDR + 0x00);
 8000d36:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <RCC_Init+0xe8>)
 8000d38:	60fb      	str	r3, [r7, #12]
	uint32_t* RCC_PLLCFGR = (uint32_t*) (RCC_BASE_ADDR + 0x04);
 8000d3a:	4b38      	ldr	r3, [pc, #224]	@ (8000e1c <RCC_Init+0xec>)
 8000d3c:	60bb      	str	r3, [r7, #8]
	uint32_t* RCC_CFGR    = (uint32_t*) (RCC_BASE_ADDR + 0x08);
 8000d3e:	4b38      	ldr	r3, [pc, #224]	@ (8000e20 <RCC_Init+0xf0>)
 8000d40:	607b      	str	r3, [r7, #4]
	uint32_t* FLASH_ACR   = (uint32_t*) (FLASH_INTF_BASE_ADDR + 0x00);
 8000d42:	4b38      	ldr	r3, [pc, #224]	@ (8000e24 <RCC_Init+0xf4>)
 8000d44:	603b      	str	r3, [r7, #0]

	/* select HSE as PLL clock entry */
	*RCC_PLLCFGR |= 1 << 22;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	601a      	str	r2, [r3, #0]

	/* select M = 8 -> f_PLL = 1MHz */
	*RCC_PLLCFGR &= ~(0x3F << 0);
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= 8 << 0;
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f043 0208 	orr.w	r2, r3, #8
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	601a      	str	r2, [r3, #0]

	/* select N = 128 -> f_PLL = 128MHz */
	*RCC_PLLCFGR &= ~(0x1FF << 6);
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	6013      	str	r3, [r2, #0]
	*RCC_PLLCFGR |= 128 << 6;
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	601a      	str	r2, [r3, #0]

	/* select P = 4 -> f_PLL = 32MHz */
	*RCC_PLLCFGR &= ~(0b11 << 16);
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= 0b01 << 16;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	601a      	str	r2, [r3, #0]

	/* enable HSE clock */
	*RCC_CR |= 1 << 16;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	601a      	str	r2, [r3, #0]

	/* wait until HSE clock is ready */
	while (((*RCC_CR >> 17) & 1) == 0);
 8000daa:	bf00      	nop
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0c5b      	lsrs	r3, r3, #17
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f8      	beq.n	8000dac <RCC_Init+0x7c>

	/* enable PLL clock */
	*RCC_CR |= 1 << 24;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	601a      	str	r2, [r3, #0]

	/* wait until PLL clock is ready */
	while (((*RCC_CR >> 25) & 1) == 0);
 8000dc6:	bf00      	nop
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0e5b      	lsrs	r3, r3, #25
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f8      	beq.n	8000dc8 <RCC_Init+0x98>

	/* FLASH response time ~= 50ns, but CPU executes 1 cycle in 31.25ns */
	/* Therefore, 1 wait state is required to allow FLASH to respond in time */
	*FLASH_ACR |= 1 << 0;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f043 0201 	orr.w	r2, r3, #1
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	601a      	str	r2, [r3, #0]

	/* select PLL as system clock */
	*RCC_CFGR &= ~(0b11 << 0);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 0203 	bic.w	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
	*RCC_CFGR |= 0b10 << 0;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f043 0202 	orr.w	r2, r3, #2
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]

	/* wait until PLL is used as the system clock */
	while (((*RCC_CFGR >> 2) & 0b11) != 0b10);
 8000dfa:	bf00      	nop
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d1f8      	bne.n	8000dfc <RCC_Init+0xcc>
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40023804 	.word	0x40023804
 8000e20:	40023808 	.word	0x40023808
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <main>:

uint8_t uid_ls[MAX_UIDs][4];
extern uint8_t button_state;

int main()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	RCC_Init();
 8000e2c:	f7ff ff80 	bl	8000d30 <RCC_Init>
	TIM_Init();
 8000e30:	f000 fd24 	bl	800187c <TIM_Init>
	SPI_Init();
 8000e34:	f7ff fdd8 	bl	80009e8 <SPI_Init>
	I2C_Init();
 8000e38:	f000 fbdc 	bl	80015f4 <I2C_Init>
	BUTTON_Init();
 8000e3c:	f7ff fef4 	bl	8000c28 <BUTTON_Init>
	MFRC522_Init();
 8000e40:	f7ff fdad 	bl	800099e <MFRC522_Init>
	SERVO_Init();
 8000e44:	f000 f8d6 	bl	8000ff4 <SERVO_Init>
	SSD1306_Init();
 8000e48:	f000 fa81 	bl	800134e <SSD1306_Init>
//	SSD1306_print6x8(".ACCESS MODE.", PAGE0, 0x18);
//	SSD1306_print8x16("SCAN YOUR TAG", PAGE2, 12);
	SSD1306_default_mode();
 8000e4c:	f000 f958 	bl	8001100 <SSD1306_default_mode>
	while (1)
	{
		if (MFRC522_IsTagPresent())
 8000e50:	f7ff fa2c 	bl	80002ac <MFRC522_IsTagPresent>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0fa      	beq.n	8000e50 <main+0x28>
		{
			switch (button_state)
 8000e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f14 <main+0xec>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d03c      	beq.n	8000edc <main+0xb4>
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	dc54      	bgt.n	8000f10 <main+0xe8>
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <main+0x48>
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d01c      	beq.n	8000ea8 <main+0x80>
					}
					delay_sec(2);
					SSD1306_print8x16("SCAN YOUR TAG", PAGE2, 12);
					break;
				default:
					break;
 8000e6e:	e04f      	b.n	8000f10 <main+0xe8>
					if (MFRC522_IsValidUID(uid_ls))
 8000e70:	4829      	ldr	r0, [pc, #164]	@ (8000f18 <main+0xf0>)
 8000e72:	f7ff f9b1 	bl	80001d8 <MFRC522_IsValidUID>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <main+0x64>
						SSD1306_print8x16("ACCESS GRANTED", PAGE2, 8);
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	2102      	movs	r1, #2
 8000e80:	4826      	ldr	r0, [pc, #152]	@ (8000f1c <main+0xf4>)
 8000e82:	f000 f96b 	bl	800115c <SSD1306_print8x16>
						door_open();
 8000e86:	f000 f857 	bl	8000f38 <door_open>
 8000e8a:	e007      	b.n	8000e9c <main+0x74>
						SSD1306_print8x16("ACCESS DENIED", PAGE2, 12);
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4823      	ldr	r0, [pc, #140]	@ (8000f20 <main+0xf8>)
 8000e92:	f000 f963 	bl	800115c <SSD1306_print8x16>
						delay_sec(2);
 8000e96:	2002      	movs	r0, #2
 8000e98:	f000 fc74 	bl	8001784 <delay_sec>
					SSD1306_print8x16("SCAN YOUR TAG", PAGE2, 12);
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4820      	ldr	r0, [pc, #128]	@ (8000f24 <main+0xfc>)
 8000ea2:	f000 f95b 	bl	800115c <SSD1306_print8x16>
					break;
 8000ea6:	e034      	b.n	8000f12 <main+0xea>
					if (MFRC522_CheckAndStoreUID(uid_ls) == 1)
 8000ea8:	481b      	ldr	r0, [pc, #108]	@ (8000f18 <main+0xf0>)
 8000eaa:	f7ff f9d9 	bl	8000260 <MFRC522_CheckAndStoreUID>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d105      	bne.n	8000ec0 <main+0x98>
						SSD1306_print8x16("ENROLL SUCCESS", PAGE2, 8);
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	481b      	ldr	r0, [pc, #108]	@ (8000f28 <main+0x100>)
 8000eba:	f000 f94f 	bl	800115c <SSD1306_print8x16>
 8000ebe:	e004      	b.n	8000eca <main+0xa2>
						SSD1306_print8x16("ENROLL FAILED", PAGE2, 12);
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	4819      	ldr	r0, [pc, #100]	@ (8000f2c <main+0x104>)
 8000ec6:	f000 f949 	bl	800115c <SSD1306_print8x16>
					delay_sec(2);
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f000 fc5a 	bl	8001784 <delay_sec>
					SSD1306_print8x16("SCAN YOUR TAG", PAGE2, 12);
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	4813      	ldr	r0, [pc, #76]	@ (8000f24 <main+0xfc>)
 8000ed6:	f000 f941 	bl	800115c <SSD1306_print8x16>
					break;
 8000eda:	e01a      	b.n	8000f12 <main+0xea>
					if (MFRC522_RemoveUID(uid_ls) == 1)
 8000edc:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <main+0xf0>)
 8000ede:	f7ff f997 	bl	8000210 <MFRC522_RemoveUID>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d105      	bne.n	8000ef4 <main+0xcc>
						SSD1306_print8x16("REMOVE SUCCESS", PAGE2, 8);
 8000ee8:	2208      	movs	r2, #8
 8000eea:	2102      	movs	r1, #2
 8000eec:	4810      	ldr	r0, [pc, #64]	@ (8000f30 <main+0x108>)
 8000eee:	f000 f935 	bl	800115c <SSD1306_print8x16>
 8000ef2:	e004      	b.n	8000efe <main+0xd6>
						SSD1306_print8x16("REMOVE FAILED", PAGE2, 12);
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <main+0x10c>)
 8000efa:	f000 f92f 	bl	800115c <SSD1306_print8x16>
					delay_sec(2);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f000 fc40 	bl	8001784 <delay_sec>
					SSD1306_print8x16("SCAN YOUR TAG", PAGE2, 12);
 8000f04:	220c      	movs	r2, #12
 8000f06:	2102      	movs	r1, #2
 8000f08:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <main+0xfc>)
 8000f0a:	f000 f927 	bl	800115c <SSD1306_print8x16>
					break;
 8000f0e:	e000      	b.n	8000f12 <main+0xea>
					break;
 8000f10:	bf00      	nop
		if (MFRC522_IsTagPresent())
 8000f12:	e79d      	b.n	8000e50 <main+0x28>
 8000f14:	20000279 	.word	0x20000279
 8000f18:	2000027c 	.word	0x2000027c
 8000f1c:	080019fc 	.word	0x080019fc
 8000f20:	08001a0c 	.word	0x08001a0c
 8000f24:	08001a1c 	.word	0x08001a1c
 8000f28:	08001a2c 	.word	0x08001a2c
 8000f2c:	08001a3c 	.word	0x08001a3c
 8000f30:	08001a4c 	.word	0x08001a4c
 8000f34:	08001a5c 	.word	0x08001a5c

08000f38 <door_open>:
#include "clock.h"
#include "timer.h"
#include "servo.h"

void door_open()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	SERVO_setAngle(100);
 8000f3c:	2064      	movs	r0, #100	@ 0x64
 8000f3e:	f000 f821 	bl	8000f84 <SERVO_setAngle>
	delay_sec(4);
 8000f42:	2004      	movs	r0, #4
 8000f44:	f000 fc1e 	bl	8001784 <delay_sec>
	door_close();
 8000f48:	f000 f802 	bl	8000f50 <door_close>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <door_close>:

void door_close()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	SERVO_setAngle(0);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 f815 	bl	8000f84 <SERVO_setAngle>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <SERVO_Ctrl>:

static void SERVO_Ctrl(uint32_t pos)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CCR3	 = (uint32_t*) (TIM2_BASE_ADDR + 0x3C);
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <SERVO_Ctrl+0x20>)
 8000f6a:	60fb      	str	r3, [r7, #12]
	*TIM2_CCR3 = pos;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	4000003c 	.word	0x4000003c

08000f84 <SERVO_setAngle>:

void SERVO_setAngle(uint8_t angle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    if (angle > 180) angle = 180;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2bb4      	cmp	r3, #180	@ 0xb4
 8000f92:	d901      	bls.n	8000f98 <SERVO_setAngle+0x14>
 8000f94:	23b4      	movs	r3, #180	@ 0xb4
 8000f96:	71fb      	strb	r3, [r7, #7]
    uint32_t ccr_value;

    if (angle <= 90)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b5a      	cmp	r3, #90	@ 0x5a
 8000f9c:	d80e      	bhi.n	8000fbc <SERVO_setAngle+0x38>
    {
        ccr_value = 2430 + ((int32_t)angle * (1450 - 2430)) / 90;
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a11      	ldr	r2, [pc, #68]	@ (8000fe8 <SERVO_setAngle+0x64>)
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <SERVO_setAngle+0x68>)
 8000fa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fac:	441a      	add	r2, r3
 8000fae:	1192      	asrs	r2, r2, #6
 8000fb0:	17db      	asrs	r3, r3, #31
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	f603 137e 	addw	r3, r3, #2430	@ 0x97e
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	e00e      	b.n	8000fda <SERVO_setAngle+0x56>
    }
    else
    {
        ccr_value = 1450 + ((int32_t)(angle - 90) * (500 - 1450)) / 90;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	3b5a      	subs	r3, #90	@ 0x5a
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <SERVO_setAngle+0x6c>)
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <SERVO_setAngle+0x68>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	441a      	add	r2, r3
 8000fce:	1192      	asrs	r2, r2, #6
 8000fd0:	17db      	asrs	r3, r3, #31
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	f203 53aa 	addw	r3, r3, #1450	@ 0x5aa
 8000fd8:	60fb      	str	r3, [r7, #12]
    }
    SERVO_Ctrl(ccr_value);
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff ffc0 	bl	8000f60 <SERVO_Ctrl>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	fffffc2c 	.word	0xfffffc2c
 8000fec:	b60b60b7 	.word	0xb60b60b7
 8000ff0:	fffffc4a 	.word	0xfffffc4a

08000ff4 <SERVO_Init>:
 * PB10	-> PWM
 * GND	-> GND
 * VCC	-> 5V
 */
void SERVO_Init()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0
	AHB1_clock_enable(AHB1_GPIOB);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff fe80 	bl	8000d00 <AHB1_clock_enable>
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 8001000:	4b37      	ldr	r3, [pc, #220]	@ (80010e0 <SERVO_Init+0xec>)
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_AFRH  = (uint32_t*) (GPIOB_BASE_ADDR + 0x24);
 8001004:	4b37      	ldr	r3, [pc, #220]	@ (80010e4 <SERVO_Init+0xf0>)
 8001006:	623b      	str	r3, [r7, #32]
	/* configure PB10 as AF */
	*GPIOB_MODER &= ~(0b11 << (10 * 2));
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= 0b10 << (10 * 2);
 8001014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	601a      	str	r2, [r3, #0]
	/* select AF01 */
	*GPIOB_AFRH &= ~(0xf << 8);
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH |= 1 << 8;
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	601a      	str	r2, [r3, #0]


	APB1_clock_enable(APB1_TIM2);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fe49 	bl	8000cd0 <APB1_clock_enable>
	uint16_t* TIM2_CR1	 = (uint16_t*) (TIM2_BASE_ADDR + 0x00);
 800103e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001042:	61fb      	str	r3, [r7, #28]
	uint16_t* TIM2_EGR	 = (uint16_t*) (TIM2_BASE_ADDR + 0x14);
 8001044:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <SERVO_Init+0xf4>)
 8001046:	61bb      	str	r3, [r7, #24]
	uint16_t* TIM2_CCMR2 = (uint16_t*) (TIM2_BASE_ADDR + 0x1C);
 8001048:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <SERVO_Init+0xf8>)
 800104a:	617b      	str	r3, [r7, #20]
	uint16_t* TIM2_PSC	 = (uint16_t*) (TIM2_BASE_ADDR + 0x28);
 800104c:	4b28      	ldr	r3, [pc, #160]	@ (80010f0 <SERVO_Init+0xfc>)
 800104e:	613b      	str	r3, [r7, #16]
	uint32_t* TIM2_ARR 	 = (uint32_t*) (TIM2_BASE_ADDR + 0x2C);
 8001050:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <SERVO_Init+0x100>)
 8001052:	60fb      	str	r3, [r7, #12]
	uint32_t* TIM2_CCR3	 = (uint32_t*) (TIM2_BASE_ADDR + 0x3C);
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <SERVO_Init+0x104>)
 8001056:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM2_CCER	 = (uint16_t*) (TIM2_BASE_ADDR + 0x20);
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <SERVO_Init+0x108>)
 800105a:	607b      	str	r3, [r7, #4]
	/* select PWM mode 1 */
	*TIM2_CCMR2 &= ~(0b111 << 4);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001064:	b29a      	uxth	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	801a      	strh	r2, [r3, #0]
	*TIM2_CCMR2 |= (0b110 << 4);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001072:	b29a      	uxth	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	801a      	strh	r2, [r3, #0]
	/* enable auto reload pre-load */
	*TIM2_CCMR2 |= 1 << 3;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	b29a      	uxth	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	801a      	strh	r2, [r3, #0]
	*TIM2_CR1 	|= 1 << 7;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800108e:	b29a      	uxth	r2, r3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	801a      	strh	r2, [r3, #0]
	/* configure CK_CNT = 1MHz */
	*TIM2_PSC = 32 - 1;
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	221f      	movs	r2, #31
 8001098:	801a      	strh	r2, [r3, #0]
	/* set T = 20ms (50Hz) */
	*TIM2_ARR = 20000 - 1;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80010a0:	601a      	str	r2, [r3, #0]
	/* set servo default position is middle */
	*TIM2_CCR3 = 1500;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80010a8:	601a      	str	r2, [r3, #0]
	/* enable channel 3 output */
	*TIM2_CCER |= 1 << 8;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	801a      	strh	r2, [r3, #0]
	/* generate update */
	*TIM2_EGR |= 1 << 0;
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	801a      	strh	r2, [r3, #0]
	/* enable counter */
	*TIM2_CR1 |= 1 << 0;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	801a      	strh	r2, [r3, #0]

	door_close();
 80010d4:	f7ff ff3c 	bl	8000f50 <door_close>
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	@ 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020424 	.word	0x40020424
 80010e8:	40000014 	.word	0x40000014
 80010ec:	4000001c 	.word	0x4000001c
 80010f0:	40000028 	.word	0x40000028
 80010f4:	4000002c 	.word	0x4000002c
 80010f8:	4000003c 	.word	0x4000003c
 80010fc:	40000020 	.word	0x40000020

08001100 <SSD1306_default_mode>:
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, //
};

void SSD1306_default_mode()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	SSD1306_print6x8(".ACCESS MODE.", PAGE0, 0x18);
 8001104:	2218      	movs	r2, #24
 8001106:	2100      	movs	r1, #0
 8001108:	4804      	ldr	r0, [pc, #16]	@ (800111c <SSD1306_default_mode+0x1c>)
 800110a:	f000 f89d 	bl	8001248 <SSD1306_print6x8>
	SSD1306_print8x16("SCAN YOUR TAG", PAGE2, 12);
 800110e:	220c      	movs	r2, #12
 8001110:	2102      	movs	r1, #2
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <SSD1306_default_mode+0x20>)
 8001114:	f000 f822 	bl	800115c <SSD1306_print8x16>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	08001a6c 	.word	0x08001a6c
 8001120:	08001a7c 	.word	0x08001a7c

08001124 <SSD1306_ClrPage>:
/**
 * @brief  Clear page (0-3)
 * @param  page  Page want to clear
 */
void SSD1306_ClrPage(uint8_t page)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	gotoxy(page, page, MIN_COL, MAX_COL);
 800112e:	79f9      	ldrb	r1, [r7, #7]
 8001130:	79f8      	ldrb	r0, [r7, #7]
 8001132:	237f      	movs	r3, #127	@ 0x7f
 8001134:	2200      	movs	r2, #0
 8001136:	f000 f97b 	bl	8001430 <gotoxy>
	for (int i = MIN_COL; i < MAX_COL; i++)
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	e005      	b.n	800114c <SSD1306_ClrPage+0x28>
	{
		OLED_WriteData(0x00);
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fa27 	bl	8001594 <OLED_WriteData>
	for (int i = MIN_COL; i < MAX_COL; i++)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001150:	ddf6      	ble.n	8001140 <SSD1306_ClrPage+0x1c>
	}
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <SSD1306_print8x16>:
 * @param  page  Page start position (0–3)
 * 				 Each character occupies 2 pages (16 pixels tall)
 * 				 Make sure 'page' and 'page+1' are both within screen range (0–3)
 */
void SSD1306_print8x16(char* str, uint8_t page, uint8_t col)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
 8001168:	4613      	mov	r3, r2
 800116a:	70bb      	strb	r3, [r7, #2]
	SSD1306_ClrPage(page);
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffd8 	bl	8001124 <SSD1306_ClrPage>
	SSD1306_ClrPage(page + 1);
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	3301      	adds	r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ffd2 	bl	8001124 <SSD1306_ClrPage>
	int size = get_size(str);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f93e 	bl	8001402 <get_size>
 8001186:	4603      	mov	r3, r0
 8001188:	60fb      	str	r3, [r7, #12]
	int c = col;
 800118a:	78bb      	ldrb	r3, [r7, #2]
 800118c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < size; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	e04e      	b.n	8001232 <SSD1306_print8x16+0xd6>
	{
		gotoxy(page, page, c, MAX_COL);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	78f9      	ldrb	r1, [r7, #3]
 800119a:	78f8      	ldrb	r0, [r7, #3]
 800119c:	237f      	movs	r3, #127	@ 0x7f
 800119e:	f000 f947 	bl	8001430 <gotoxy>
		int index = str[i] - 65;
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	3b41      	subs	r3, #65	@ 0x41
 80011ac:	617b      	str	r3, [r7, #20]
		if (str[i] >= 'a') 		index -= 32;
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b60      	cmp	r3, #96	@ 0x60
 80011b8:	d903      	bls.n	80011c2 <SSD1306_print8x16+0x66>
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3b20      	subs	r3, #32
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e010      	b.n	80011e4 <SSD1306_print8x16+0x88>
		else if (str[i] == ' ') index = 26;
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b20      	cmp	r3, #32
 80011cc:	d102      	bne.n	80011d4 <SSD1306_print8x16+0x78>
 80011ce:	231a      	movs	r3, #26
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e007      	b.n	80011e4 <SSD1306_print8x16+0x88>
		else if (str[i] == '.') index = 27;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80011de:	d101      	bne.n	80011e4 <SSD1306_print8x16+0x88>
 80011e0:	231b      	movs	r3, #27
 80011e2:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 16; j++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	e01a      	b.n	8001220 <SSD1306_print8x16+0xc4>
		{
			if (j == 8)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d10a      	bne.n	8001206 <SSD1306_print8x16+0xaa>
			{
				gotoxy(page + 1, page + 1, c, MAX_COL);
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b2d8      	uxtb	r0, r3
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2d9      	uxtb	r1, r3
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	237f      	movs	r3, #127	@ 0x7f
 8001202:	f000 f915 	bl	8001430 <gotoxy>
			}
			OLED_WriteData(font8x16[index][j]);
 8001206:	4a0f      	ldr	r2, [pc, #60]	@ (8001244 <SSD1306_print8x16+0xe8>)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	441a      	add	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f9bd 	bl	8001594 <OLED_WriteData>
		for (int j = 0; j < 16; j++)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	3301      	adds	r3, #1
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	dde1      	ble.n	80011ea <SSD1306_print8x16+0x8e>
		}
		c += 8;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3308      	adds	r3, #8
 800122a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < size; i++)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	3301      	adds	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	dbac      	blt.n	8001194 <SSD1306_print8x16+0x38>
	}
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000a8 	.word	0x200000a8

08001248 <SSD1306_print6x8>:
 * @param  col   Column start position (0–127)
 * @param  page  Page start position (0–3)
 * 				 Each page is 8 pixels tall
 */
void SSD1306_print6x8(char* str, uint8_t page, uint8_t col)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
 8001254:	4613      	mov	r3, r2
 8001256:	70bb      	strb	r3, [r7, #2]
	SSD1306_ClrPage(page);
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff62 	bl	8001124 <SSD1306_ClrPage>
	gotoxy(page, page, col, MAX_COL);
 8001260:	78ba      	ldrb	r2, [r7, #2]
 8001262:	78f9      	ldrb	r1, [r7, #3]
 8001264:	78f8      	ldrb	r0, [r7, #3]
 8001266:	237f      	movs	r3, #127	@ 0x7f
 8001268:	f000 f8e2 	bl	8001430 <gotoxy>
	int size = get_size(str);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f8c8 	bl	8001402 <get_size>
 8001272:	4603      	mov	r3, r0
 8001274:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < size; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e039      	b.n	80012f0 <SSD1306_print6x8+0xa8>
	{
		int index = str[i] - 65;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	3b41      	subs	r3, #65	@ 0x41
 8001286:	613b      	str	r3, [r7, #16]
		if (str[i] >= 'a') 		index -= 32;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b60      	cmp	r3, #96	@ 0x60
 8001292:	d903      	bls.n	800129c <SSD1306_print6x8+0x54>
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	3b20      	subs	r3, #32
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	e010      	b.n	80012be <SSD1306_print6x8+0x76>
		else if (str[i] == ' ') index = 26;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b20      	cmp	r3, #32
 80012a6:	d102      	bne.n	80012ae <SSD1306_print6x8+0x66>
 80012a8:	231a      	movs	r3, #26
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	e007      	b.n	80012be <SSD1306_print6x8+0x76>
		else if (str[i] == '.') index = 27;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80012b8:	d101      	bne.n	80012be <SSD1306_print6x8+0x76>
 80012ba:	231b      	movs	r3, #27
 80012bc:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < 6; j++)
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	e00f      	b.n	80012e4 <SSD1306_print6x8+0x9c>
		{
			OLED_WriteData(font6x8[index][j]);
 80012c4:	490f      	ldr	r1, [pc, #60]	@ (8001304 <SSD1306_print6x8+0xbc>)
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	18ca      	adds	r2, r1, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f95b 	bl	8001594 <OLED_WriteData>
		for (int j = 0; j < 6; j++)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	ddec      	ble.n	80012c4 <SSD1306_print6x8+0x7c>
	for (int i = 0; i < size; i++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbc1      	blt.n	800127c <SSD1306_print6x8+0x34>
		}
	}
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000000 	.word	0x20000000

08001308 <SSD1306_ClrScr>:
		delay_sec(1);
	}
}

void SSD1306_ClrScr()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	gotoxy(PAGE0, PAGE3, MIN_COL, MAX_COL);
 800130e:	237f      	movs	r3, #127	@ 0x7f
 8001310:	2200      	movs	r2, #0
 8001312:	2103      	movs	r1, #3
 8001314:	2000      	movs	r0, #0
 8001316:	f000 f88b 	bl	8001430 <gotoxy>
    /* Fill whole screen (4 pages x 128 columns) */
    for (int page = 0; page < 4; page++)
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	e00e      	b.n	800133e <SSD1306_ClrScr+0x36>
    {
        for (int col = 0; col < 128; col++)
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	e005      	b.n	8001332 <SSD1306_ClrScr+0x2a>
        {
            OLED_WriteData(0x00);
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f934 	bl	8001594 <OLED_WriteData>
        for (int col = 0; col < 128; col++)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b7f      	cmp	r3, #127	@ 0x7f
 8001336:	ddf6      	ble.n	8001326 <SSD1306_ClrScr+0x1e>
    for (int page = 0; page < 4; page++)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3301      	adds	r3, #1
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b03      	cmp	r3, #3
 8001342:	dded      	ble.n	8001320 <SSD1306_ClrScr+0x18>
        }
    }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <SSD1306_Init>:
 * PC9	-> SDA
 * GND	-> GND
 * VCC	-> 3V
 */
void SSD1306_Init()
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
	delay_millisec(100);
 8001352:	2064      	movs	r0, #100	@ 0x64
 8001354:	f000 f9fe 	bl	8001754 <delay_millisec>
	OLED_WriteCMD(0xAE); //display off
 8001358:	20ae      	movs	r0, #174	@ 0xae
 800135a:	f000 f933 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x20); //Set Memory Addressing Mode
 800135e:	2020      	movs	r0, #32
 8001360:	f000 f930 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f92d 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800136a:	20b0      	movs	r0, #176	@ 0xb0
 800136c:	f000 f92a 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xC8); //Set COM Output Scan Direction
 8001370:	20c8      	movs	r0, #200	@ 0xc8
 8001372:	f000 f927 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x00); //---set low column address
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f924 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x10); //---set high column address
 800137c:	2010      	movs	r0, #16
 800137e:	f000 f921 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x40); //--set start line address - CHECK
 8001382:	2040      	movs	r0, #64	@ 0x40
 8001384:	f000 f91e 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xFF);
 8001388:	20ff      	movs	r0, #255	@ 0xff
 800138a:	f000 f91b 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xA1); //--set segment re-map 0 to 127 - CHECK
 800138e:	20a1      	movs	r0, #161	@ 0xa1
 8001390:	f000 f918 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xA6); //--set normal color
 8001394:	20a6      	movs	r0, #166	@ 0xa6
 8001396:	f000 f915 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800139a:	20a8      	movs	r0, #168	@ 0xa8
 800139c:	f000 f912 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x1F); //
 80013a0:	201f      	movs	r0, #31
 80013a2:	f000 f90f 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013a6:	20a4      	movs	r0, #164	@ 0xa4
 80013a8:	f000 f90c 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xD3); //-set display offset - CHECK
 80013ac:	20d3      	movs	r0, #211	@ 0xd3
 80013ae:	f000 f909 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x00); //-not offset
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f906 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xD5); //--set display clock divide ratio/oscillator frequency
 80013b8:	20d5      	movs	r0, #213	@ 0xd5
 80013ba:	f000 f903 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xF0); //--set divide ratio
 80013be:	20f0      	movs	r0, #240	@ 0xf0
 80013c0:	f000 f900 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xD9); //--set pre-charge period
 80013c4:	20d9      	movs	r0, #217	@ 0xd9
 80013c6:	f000 f8fd 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x22); //
 80013ca:	2022      	movs	r0, #34	@ 0x22
 80013cc:	f000 f8fa 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xDA); //--set com pins hardware configuration - CHECK
 80013d0:	20da      	movs	r0, #218	@ 0xda
 80013d2:	f000 f8f7 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x02);
 80013d6:	2002      	movs	r0, #2
 80013d8:	f000 f8f4 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xDB); //--set vcomh
 80013dc:	20db      	movs	r0, #219	@ 0xdb
 80013de:	f000 f8f1 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x20); //0x20,0.77xVcc
 80013e2:	2020      	movs	r0, #32
 80013e4:	f000 f8ee 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x8D); //--set DC-DC enable
 80013e8:	208d      	movs	r0, #141	@ 0x8d
 80013ea:	f000 f8eb 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0x14); //
 80013ee:	2014      	movs	r0, #20
 80013f0:	f000 f8e8 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(0xAF); //--turn on SSD1306 panel
 80013f4:	20af      	movs	r0, #175	@ 0xaf
 80013f6:	f000 f8e5 	bl	80015c4 <OLED_WriteCMD>
	SSD1306_ClrScr();
 80013fa:	f7ff ff85 	bl	8001308 <SSD1306_ClrScr>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}

08001402 <get_size>:

static uint8_t get_size(char* s)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
	while (s[cnt] != 0) cnt++;
 800140e:	e002      	b.n	8001416 <get_size+0x14>
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	3301      	adds	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f6      	bne.n	8001410 <get_size+0xe>
	return cnt;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <gotoxy>:
 * For OLED 0.91 inch 128x32 pixels
 * 0 <= page <= 3
 * 0 <= column <= 127
 */
static void gotoxy(uint8_t page_start, uint8_t page_end, uint8_t col_start, uint8_t col_end)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4604      	mov	r4, r0
 8001438:	4608      	mov	r0, r1
 800143a:	4611      	mov	r1, r2
 800143c:	461a      	mov	r2, r3
 800143e:	4623      	mov	r3, r4
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	4603      	mov	r3, r0
 8001444:	71bb      	strb	r3, [r7, #6]
 8001446:	460b      	mov	r3, r1
 8001448:	717b      	strb	r3, [r7, #5]
 800144a:	4613      	mov	r3, r2
 800144c:	713b      	strb	r3, [r7, #4]
	OLED_WriteCMD(0x21);  		// Set column address
 800144e:	2021      	movs	r0, #33	@ 0x21
 8001450:	f000 f8b8 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(col_start);  	// Column start = 32
 8001454:	797b      	ldrb	r3, [r7, #5]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f8b4 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(col_end);  	// Column end = 96
 800145c:	793b      	ldrb	r3, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f8b0 	bl	80015c4 <OLED_WriteCMD>

	OLED_WriteCMD(0x22);  		// Set page address
 8001464:	2022      	movs	r0, #34	@ 0x22
 8001466:	f000 f8ad 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(page_start);  // Page start = 0
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f8a9 	bl	80015c4 <OLED_WriteCMD>
	OLED_WriteCMD(page_end);  	// Page end = 0
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f8a5 	bl	80015c4 <OLED_WriteCMD>
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bd90      	pop	{r4, r7, pc}
	...

08001484 <I2C_send_byte>:

static void I2C_send_byte(uint8_t data)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
	uint8_t* I2C_DR   = (uint8_t*) (I2C3_BASE_ADDR + 0x10);
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <I2C_send_byte+0x38>)
 8001490:	60fb      	str	r3, [r7, #12]
	uint32_t* I2C_SR1 = (uint32_t*) (I2C3_BASE_ADDR + 0x14);
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <I2C_send_byte+0x3c>)
 8001494:	60bb      	str	r3, [r7, #8]
	*I2C_DR = data;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	701a      	strb	r2, [r3, #0]
	while (((*I2C_SR1 >> 7) & 1) == 0);	// wait until data has been transferred
 800149c:	bf00      	nop
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	09db      	lsrs	r3, r3, #7
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f8      	beq.n	800149e <I2C_send_byte+0x1a>
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40005c10 	.word	0x40005c10
 80014c0:	40005c14 	.word	0x40005c14

080014c4 <I2C_stop>:

static void I2C_stop()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	uint32_t* I2C_CR1 = (uint32_t*) (I2C3_BASE_ADDR + 0x00);
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <I2C_stop+0x24>)
 80014cc:	607b      	str	r3, [r7, #4]
	*I2C_CR1 |= 1 << 9;		// send STOP
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40005c00 	.word	0x40005c00

080014ec <I2C_send_addr>:

static void I2C_send_addr(uint8_t slave_addr, mode_t mode)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	460a      	mov	r2, r1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	4613      	mov	r3, r2
 80014fa:	71bb      	strb	r3, [r7, #6]
	uint8_t* I2C_DR   = (uint8_t*) (I2C3_BASE_ADDR + 0x10);
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <I2C_send_addr+0x5c>)
 80014fe:	617b      	str	r3, [r7, #20]
	uint32_t* I2C_SR1 = (uint32_t*) (I2C3_BASE_ADDR + 0x14);
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <I2C_send_addr+0x60>)
 8001502:	613b      	str	r3, [r7, #16]
	uint32_t* I2C_SR2 = (uint32_t*) (I2C3_BASE_ADDR + 0x18);
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <I2C_send_addr+0x64>)
 8001506:	60fb      	str	r3, [r7, #12]
	/*	ADDRESS PHASE  */
	// send address to slave and select WRITE mode
	*I2C_DR = (slave_addr << 1) | mode;
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	b25a      	sxtb	r2, r3
 8001510:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001514:	4313      	orrs	r3, r2
 8001516:	b25b      	sxtb	r3, r3
 8001518:	b2da      	uxtb	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	701a      	strb	r2, [r3, #0]
	// wait until the address transmission is completed
	while (((*I2C_SR1 >> 1) & 1) == 0);
 800151e:	bf00      	nop
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f8      	beq.n	8001520 <I2C_send_addr+0x34>
	// read SR1 and SR2 to clear ADDR bit
	volatile int tmp = *I2C_SR1;
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60bb      	str	r3, [r7, #8]
	tmp = *I2C_SR2;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60bb      	str	r3, [r7, #8]
}
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40005c10 	.word	0x40005c10
 800154c:	40005c14 	.word	0x40005c14
 8001550:	40005c18 	.word	0x40005c18

08001554 <I2C_start>:

static void I2C_start()
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
	uint32_t* I2C_CR1 = (uint32_t*) (I2C3_BASE_ADDR + 0x00);
 800155a:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <I2C_start+0x38>)
 800155c:	607b      	str	r3, [r7, #4]
	uint32_t* I2C_SR1 = (uint32_t*) (I2C3_BASE_ADDR + 0x14);
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <I2C_start+0x3c>)
 8001560:	603b      	str	r3, [r7, #0]
	// send START
	*I2C_CR1 |= 1 << 8;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]
	// wait until START condition is generated and operate at Master mode
	while ((*I2C_SR1 & 1) == 0);
 800156e:	bf00      	nop
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f9      	beq.n	8001570 <I2C_start+0x1c>
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40005c00 	.word	0x40005c00
 8001590:	40005c14 	.word	0x40005c14

08001594 <OLED_WriteData>:

static void OLED_WriteData(uint8_t data)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	I2C_start();
 800159e:	f7ff ffd9 	bl	8001554 <I2C_start>
	I2C_send_addr(SSD1306_ADDR, W);
 80015a2:	2100      	movs	r1, #0
 80015a4:	203c      	movs	r0, #60	@ 0x3c
 80015a6:	f7ff ffa1 	bl	80014ec <I2C_send_addr>
	I2C_send_byte(DATA);
 80015aa:	2040      	movs	r0, #64	@ 0x40
 80015ac:	f7ff ff6a 	bl	8001484 <I2C_send_byte>
	I2C_send_byte(data);
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff66 	bl	8001484 <I2C_send_byte>
	I2C_stop();
 80015b8:	f7ff ff84 	bl	80014c4 <I2C_stop>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <OLED_WriteCMD>:

static void OLED_WriteCMD(uint8_t cmd)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	I2C_start();
 80015ce:	f7ff ffc1 	bl	8001554 <I2C_start>
	I2C_send_addr(SSD1306_ADDR, W);
 80015d2:	2100      	movs	r1, #0
 80015d4:	203c      	movs	r0, #60	@ 0x3c
 80015d6:	f7ff ff89 	bl	80014ec <I2C_send_addr>
	I2C_send_byte(CMD);
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff ff52 	bl	8001484 <I2C_send_byte>
	I2C_send_byte(cmd);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff4e 	bl	8001484 <I2C_send_byte>
	I2C_stop();
 80015e8:	f7ff ff6c 	bl	80014c4 <I2C_stop>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <I2C_Init>:

void I2C_Init()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
	AHB1_clock_enable(AHB1_GPIOA);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fb80 	bl	8000d00 <AHB1_clock_enable>
	AHB1_clock_enable(AHB1_GPIOC);
 8001600:	2002      	movs	r0, #2
 8001602:	f7ff fb7d 	bl	8000d00 <AHB1_clock_enable>
	uint32_t* GPIOA_MODER = (uint32_t*) (GPIOA_BASE_ADDR + 0x00);
 8001606:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <I2C_Init+0xc0>)
 8001608:	61fb      	str	r3, [r7, #28]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 800160a:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <I2C_Init+0xc4>)
 800160c:	61bb      	str	r3, [r7, #24]
	uint32_t* GPIOA_AFRH  = (uint32_t*) (GPIOA_BASE_ADDR + 0x24);
 800160e:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <I2C_Init+0xc8>)
 8001610:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOC_AFRH  = (uint32_t*) (GPIOC_BASE_ADDR + 0x24);
 8001612:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <I2C_Init+0xcc>)
 8001614:	613b      	str	r3, [r7, #16]
	/* set PA8 & PC9 as AF */
	*GPIOA_MODER &= ~(0b11 << (8 * 2));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER &= ~(0b11 << (9 * 2));
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= 0b10 << (8 * 2);
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= 0b10 << (9 * 2);
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	601a      	str	r2, [r3, #0]
	/* select AF04 for PA8 & PC9 */
	*GPIOA_AFRH &= ~(0xf << 0);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 020f 	bic.w	r2, r3, #15
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]
	*GPIOC_AFRH &= ~(0xf << 4);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRH |= 4 << 0;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f043 0204 	orr.w	r2, r3, #4
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	601a      	str	r2, [r3, #0]
	*GPIOC_AFRH |= 4 << 4;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	601a      	str	r2, [r3, #0]

	APB1_clock_enable(APB1_I2C3);
 8001676:	2017      	movs	r0, #23
 8001678:	f7ff fb2a 	bl	8000cd0 <APB1_clock_enable>
	uint32_t* I2C_CR1 = (uint32_t*) (I2C3_BASE_ADDR + 0x00);
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <I2C_Init+0xd0>)
 800167e:	60fb      	str	r3, [r7, #12]
	uint32_t* I2C_CR2 = (uint32_t*) (I2C3_BASE_ADDR + 0x04);
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <I2C_Init+0xd4>)
 8001682:	60bb      	str	r3, [r7, #8]
	uint32_t* I2C_CCR = (uint32_t*) (I2C3_BASE_ADDR + 0x1C);
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <I2C_Init+0xd8>)
 8001686:	607b      	str	r3, [r7, #4]
	/* f = 32MHz */
	*I2C_CR2 |= 32 << 0;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f043 0220 	orr.w	r2, r3, #32
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	/* set SCL clock = 100 kHz */
	*I2C_CCR |= 160 << 0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f043 02a0 	orr.w	r2, r3, #160	@ 0xa0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	601a      	str	r2, [r3, #0]
	/* enable I2C */
	*I2C_CR1 |= (1 << 0);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020024 	.word	0x40020024
 80016c0:	40020824 	.word	0x40020824
 80016c4:	40005c00 	.word	0x40005c00
 80016c8:	40005c04 	.word	0x40005c04
 80016cc:	40005c1c 	.word	0x40005c1c

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001726:	f000 f90d 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <delay_millisec>:
	cnt = 0;
	while (cnt < time);
}

void delay_millisec(uint32_t time)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	millisec_config();
 800175c:	f000 f846 	bl	80017ec <millisec_config>
	cnt = 0;
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <delay_millisec+0x2c>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
	while (cnt < time);
 8001766:	bf00      	nop
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <delay_millisec+0x2c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4293      	cmp	r3, r2
 8001772:	d8f9      	bhi.n	8001768 <delay_millisec+0x14>
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000028c 	.word	0x2000028c

08001784 <delay_sec>:

void delay_sec(uint32_t time)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	sec_config();
 800178c:	f000 f852 	bl	8001834 <sec_config>
	cnt = 0;
 8001790:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <delay_sec+0x2c>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
	while (cnt < time);
 8001796:	bf00      	nop
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <delay_sec+0x2c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d8f9      	bhi.n	8001798 <delay_sec+0x14>
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000028c 	.word	0x2000028c

080017b4 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler()
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
	cnt++;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a08      	ldr	r2, [pc, #32]	@ (80017e4 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80017c2:	6013      	str	r3, [r2, #0]
	uint16_t* TIM1_SR  = (uint16_t*) (TIM1_BASE_ADDR + 0x10);
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <TIM1_UP_TIM10_IRQHandler+0x34>)
 80017c6:	607b      	str	r3, [r7, #4]
	*TIM1_SR &= ~1;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	801a      	strh	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000028c 	.word	0x2000028c
 80017e8:	40010010 	.word	0x40010010

080017ec <millisec_config>:
	/* (force) generate update */
	*TIM1_EGR |= 1 << 0;
}

static void millisec_config()
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
	uint16_t* TIM1_PSC = (uint16_t*) (TIM1_BASE_ADDR + 0x28);
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <millisec_config+0x3c>)
 80017f4:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM1_ARR = (uint16_t*) (TIM1_BASE_ADDR + 0x2C);
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <millisec_config+0x40>)
 80017f8:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM1_EGR = (uint16_t*) (TIM1_BASE_ADDR + 0x14);
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <millisec_config+0x44>)
 80017fc:	607b      	str	r3, [r7, #4]
	/* set CK_CNT = 1MHz -> 1 Tick = 1us */
	*TIM1_PSC = 32 - 1;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	221f      	movs	r2, #31
 8001802:	801a      	strh	r2, [r3, #0]

	/* set auto-reload value -> 1000 Tick = 1ms */
	*TIM1_ARR = 1000 - 1;
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800180a:	801a      	strh	r2, [r3, #0]

	/* (force) generate update */
	*TIM1_EGR |= 1 << 0;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	801a      	strh	r2, [r3, #0]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40010028 	.word	0x40010028
 800182c:	4001002c 	.word	0x4001002c
 8001830:	40010014 	.word	0x40010014

08001834 <sec_config>:

static void sec_config()
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
	uint16_t* TIM1_PSC = (uint16_t*) (TIM1_BASE_ADDR + 0x28);
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <sec_config+0x3c>)
 800183c:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM1_ARR = (uint16_t*) (TIM1_BASE_ADDR + 0x2C);
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <sec_config+0x40>)
 8001840:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM1_EGR = (uint16_t*) (TIM1_BASE_ADDR + 0x14);
 8001842:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <sec_config+0x44>)
 8001844:	607b      	str	r3, [r7, #4]
	/* set CK_CNT = 1kHz -> 1 Tick = 1ms */
	*TIM1_PSC = 32000 - 1;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800184c:	801a      	strh	r2, [r3, #0]

	/* set auto-reload value -> 1000 Tick = 1s */
	*TIM1_ARR = 1000 - 1;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001854:	801a      	strh	r2, [r3, #0]

	/* (force) generate update */
	*TIM1_EGR |= 1 << 0;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	801a      	strh	r2, [r3, #0]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40010028 	.word	0x40010028
 8001874:	4001002c 	.word	0x4001002c
 8001878:	40010014 	.word	0x40010014

0800187c <TIM_Init>:

/**
 * @brief  this function is used to initial timer1
 */
void TIM_Init()
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
	APB2_clock_enable(APB2_TIM1);
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff fa0c 	bl	8000ca0 <APB2_clock_enable>
	uint16_t* TIM1_PSC  = (uint16_t*) (TIM1_BASE_ADDR + 0x28);
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <TIM_Init+0x60>)
 800188a:	617b      	str	r3, [r7, #20]
	uint16_t* TIM1_DIER = (uint16_t*) (TIM1_BASE_ADDR + 0x0C);
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <TIM_Init+0x64>)
 800188e:	613b      	str	r3, [r7, #16]
	uint16_t* TIM1_CR1  = (uint16_t*) (TIM1_BASE_ADDR + 0x00);
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <TIM_Init+0x68>)
 8001892:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM1_ARR  = (uint16_t*) (TIM1_BASE_ADDR + 0x2C);
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <TIM_Init+0x6c>)
 8001896:	60bb      	str	r3, [r7, #8]
	uint32_t* NVIC_ISER0 = (uint32_t*) (0xE000E100);
 8001898:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <TIM_Init+0x70>)
 800189a:	607b      	str	r3, [r7, #4]

	/* set CK_CNT = 1kHz */
	*TIM1_PSC = 32000 - 1;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80018a2:	801a      	strh	r2, [r3, #0]

	/* set auto-reload value */
	*TIM1_ARR = 1000;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018aa:	801a      	strh	r2, [r3, #0]

	/* enable update interrupt */
	*TIM1_DIER |= 1 << 0;
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	801a      	strh	r2, [r3, #0]

	/* interrupt set-enable */
	*NVIC_ISER0 |= 1 << 25;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]

	/* enable counter */
	*TIM1_CR1 |= 1 << 0;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	801a      	strh	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40010028 	.word	0x40010028
 80018e0:	4001000c 	.word	0x4001000c
 80018e4:	40010000 	.word	0x40010000
 80018e8:	4001002c 	.word	0x4001002c
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001928 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018f4:	f7ff ff1c 	bl	8001730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	@ (800192c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	@ (8001930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	@ (800193c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191e:	f000 f825 	bl	800196c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001922:	f7ff fa81 	bl	8000e28 <main>
  bx  lr    
 8001926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8001934:	08001a94 	.word	0x08001a94
  ldr r2, =_sbss
 8001938:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 800193c:	20000294 	.word	0x20000294

08001940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC_IRQHandler>
	...

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000258 	.word	0x20000258
 8001968:	20000290 	.word	0x20000290

0800196c <__libc_init_array>:
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	4d0d      	ldr	r5, [pc, #52]	@ (80019a4 <__libc_init_array+0x38>)
 8001970:	4c0d      	ldr	r4, [pc, #52]	@ (80019a8 <__libc_init_array+0x3c>)
 8001972:	1b64      	subs	r4, r4, r5
 8001974:	10a4      	asrs	r4, r4, #2
 8001976:	2600      	movs	r6, #0
 8001978:	42a6      	cmp	r6, r4
 800197a:	d109      	bne.n	8001990 <__libc_init_array+0x24>
 800197c:	4d0b      	ldr	r5, [pc, #44]	@ (80019ac <__libc_init_array+0x40>)
 800197e:	4c0c      	ldr	r4, [pc, #48]	@ (80019b0 <__libc_init_array+0x44>)
 8001980:	f000 f818 	bl	80019b4 <_init>
 8001984:	1b64      	subs	r4, r4, r5
 8001986:	10a4      	asrs	r4, r4, #2
 8001988:	2600      	movs	r6, #0
 800198a:	42a6      	cmp	r6, r4
 800198c:	d105      	bne.n	800199a <__libc_init_array+0x2e>
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	f855 3b04 	ldr.w	r3, [r5], #4
 8001994:	4798      	blx	r3
 8001996:	3601      	adds	r6, #1
 8001998:	e7ee      	b.n	8001978 <__libc_init_array+0xc>
 800199a:	f855 3b04 	ldr.w	r3, [r5], #4
 800199e:	4798      	blx	r3
 80019a0:	3601      	adds	r6, #1
 80019a2:	e7f2      	b.n	800198a <__libc_init_array+0x1e>
 80019a4:	08001a8c 	.word	0x08001a8c
 80019a8:	08001a8c 	.word	0x08001a8c
 80019ac:	08001a8c 	.word	0x08001a8c
 80019b0:	08001a90 	.word	0x08001a90

080019b4 <_init>:
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	bf00      	nop
 80019b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ba:	bc08      	pop	{r3}
 80019bc:	469e      	mov	lr, r3
 80019be:	4770      	bx	lr

080019c0 <_fini>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	bf00      	nop
 80019c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c6:	bc08      	pop	{r3}
 80019c8:	469e      	mov	lr, r3
 80019ca:	4770      	bx	lr
