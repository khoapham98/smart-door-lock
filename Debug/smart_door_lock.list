
smart_door_lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a50  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000be8  08000be8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000be8  08000be8  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000be8  08000be8  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000be8  08000be8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000be8  08000be8  00001be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000bec  08000bec  00001bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000bf0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000004  08000bf4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000bf4  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bea  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008db  00000000  00000000  00003c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f0  00000000  00000000  00004500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000212  00000000  00000000  000047f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001448a  00000000  00000000  00004a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c5c  00000000  00000000  00018e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f6f8  00000000  00000000  0001cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c1e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000098c  00000000  00000000  0009c224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000bd0 	.word	0x08000bd0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000bd0 	.word	0x08000bd0

080001d8 <MFRC522_Request>:
static void SetBitMask(uint8_t reg_addr, uint8_t mask);
static void ClearBitMask(uint8_t reg_addr, uint8_t mask);
static uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint32_t *backLen);

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af02      	add	r7, sp, #8
 80001de:	4603      	mov	r3, r0
 80001e0:	6039      	str	r1, [r7, #0]
 80001e2:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint32_t backBits;	// The received data bits

	MFRC522_write(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80001e4:	2107      	movs	r1, #7
 80001e6:	200d      	movs	r0, #13
 80001e8:	f000 f986 	bl	80004f8 <MFRC522_write>
	TagType[0] = reqMode;
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	79fa      	ldrb	r2, [r7, #7]
 80001f0:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80001f2:	f107 0308 	add.w	r3, r7, #8
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	2201      	movs	r2, #1
 80001fc:	6839      	ldr	r1, [r7, #0]
 80001fe:	200c      	movs	r0, #12
 8000200:	f000 f84c 	bl	800029c <MFRC522_ToCard>
 8000204:	4603      	mov	r3, r0
 8000206:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10))
 8000208:	7bfb      	ldrb	r3, [r7, #15]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d102      	bne.n	8000214 <MFRC522_Request+0x3c>
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	2b10      	cmp	r3, #16
 8000212:	d001      	beq.n	8000218 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000214:	2302      	movs	r3, #2
 8000216:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000218:	7bfb      	ldrb	r3, [r7, #15]
}
 800021a:	4618      	mov	r0, r3
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}

08000222 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8000222:	b580      	push	{r7, lr}
 8000224:	b086      	sub	sp, #24
 8000226:	af02      	add	r7, sp, #8
 8000228:	6078      	str	r0, [r7, #4]
	uint8_t status;
    uint8_t i;
    uint8_t serNumCheck=0;
 800022a:	2300      	movs	r3, #0
 800022c:	737b      	strb	r3, [r7, #13]
    uint32_t unLen;

	MFRC522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800022e:	2100      	movs	r1, #0
 8000230:	200d      	movs	r0, #13
 8000232:	f000 f961 	bl	80004f8 <MFRC522_write>

    serNum[0] = PICC_ANTICOLL;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2293      	movs	r2, #147	@ 0x93
 800023a:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	2220      	movs	r2, #32
 8000242:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000244:	f107 0308 	add.w	r3, r7, #8
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2202      	movs	r2, #2
 800024e:	6879      	ldr	r1, [r7, #4]
 8000250:	200c      	movs	r0, #12
 8000252:	f000 f823 	bl	800029c <MFRC522_ToCard>
 8000256:	4603      	mov	r3, r0
 8000258:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d118      	bne.n	8000292 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000260:	2300      	movs	r3, #0
 8000262:	73bb      	strb	r3, [r7, #14]
 8000264:	e009      	b.n	800027a <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000266:	7bbb      	ldrb	r3, [r7, #14]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	7b7b      	ldrb	r3, [r7, #13]
 8000270:	4053      	eors	r3, r2
 8000272:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	3301      	adds	r3, #1
 8000278:	73bb      	strb	r3, [r7, #14]
 800027a:	7bbb      	ldrb	r3, [r7, #14]
 800027c:	2b03      	cmp	r3, #3
 800027e:	d9f2      	bls.n	8000266 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000280:	7bbb      	ldrb	r3, [r7, #14]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4413      	add	r3, r2
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	7b7a      	ldrb	r2, [r7, #13]
 800028a:	429a      	cmp	r2, r3
 800028c:	d001      	beq.n	8000292 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 800028e:	2302      	movs	r3, #2
 8000290:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000292:	7bfb      	ldrb	r3, [r7, #15]
}
 8000294:	4618      	mov	r0, r3
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MFRC522_ToCard>:

static uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint32_t *backLen)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b089      	sub	sp, #36	@ 0x24
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60b9      	str	r1, [r7, #8]
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	4603      	mov	r3, r0
 80002a8:	73fb      	strb	r3, [r7, #15]
 80002aa:	4613      	mov	r3, r2
 80002ac:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80002ae:	2302      	movs	r3, #2
 80002b0:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 80002b2:	2300      	movs	r3, #0
 80002b4:	77bb      	strb	r3, [r7, #30]
	uint8_t waitIRq = 0x00;
 80002b6:	2300      	movs	r3, #0
 80002b8:	777b      	strb	r3, [r7, #29]
	uint8_t lastBits;
	uint8_t n;
	uint32_t i;

    switch (command)
 80002ba:	7bfb      	ldrb	r3, [r7, #15]
 80002bc:	2b0c      	cmp	r3, #12
 80002be:	d006      	beq.n	80002ce <MFRC522_ToCard+0x32>
 80002c0:	2b0e      	cmp	r3, #14
 80002c2:	d109      	bne.n	80002d8 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80002c4:	2312      	movs	r3, #18
 80002c6:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80002c8:	2310      	movs	r3, #16
 80002ca:	777b      	strb	r3, [r7, #29]
			break;
 80002cc:	e005      	b.n	80002da <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80002ce:	2377      	movs	r3, #119	@ 0x77
 80002d0:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80002d2:	2330      	movs	r3, #48	@ 0x30
 80002d4:	777b      	strb	r3, [r7, #29]
			break;
 80002d6:	e000      	b.n	80002da <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80002d8:	bf00      	nop
    }

    MFRC522_write(CommIEnReg, irqEn|0x80);	// Interrupt request
 80002da:	7fbb      	ldrb	r3, [r7, #30]
 80002dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	4619      	mov	r1, r3
 80002e4:	2002      	movs	r0, #2
 80002e6:	f000 f907 	bl	80004f8 <MFRC522_write>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80002ea:	2180      	movs	r1, #128	@ 0x80
 80002ec:	2004      	movs	r0, #4
 80002ee:	f000 f8c8 	bl	8000482 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80002f2:	2180      	movs	r1, #128	@ 0x80
 80002f4:	200a      	movs	r0, #10
 80002f6:	f000 f8e4 	bl	80004c2 <SetBitMask>

	MFRC522_write(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80002fa:	2100      	movs	r1, #0
 80002fc:	2001      	movs	r0, #1
 80002fe:	f000 f8fb 	bl	80004f8 <MFRC522_write>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000302:	2300      	movs	r3, #0
 8000304:	61bb      	str	r3, [r7, #24]
 8000306:	e00a      	b.n	800031e <MFRC522_ToCard+0x82>
    {
		MFRC522_write(FIFODataReg, sendData[i]);
 8000308:	68ba      	ldr	r2, [r7, #8]
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4619      	mov	r1, r3
 8000312:	2009      	movs	r0, #9
 8000314:	f000 f8f0 	bl	80004f8 <MFRC522_write>
    for (i=0; i<sendLen; i++)
 8000318:	69bb      	ldr	r3, [r7, #24]
 800031a:	3301      	adds	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
 800031e:	7bbb      	ldrb	r3, [r7, #14]
 8000320:	69ba      	ldr	r2, [r7, #24]
 8000322:	429a      	cmp	r2, r3
 8000324:	d3f0      	bcc.n	8000308 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	MFRC522_write(CommandReg, command);
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	4619      	mov	r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	f000 f8e4 	bl	80004f8 <MFRC522_write>
    if (command == PCD_TRANSCEIVE)
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	2b0c      	cmp	r3, #12
 8000334:	d103      	bne.n	800033e <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000336:	2180      	movs	r1, #128	@ 0x80
 8000338:	200d      	movs	r0, #13
 800033a:	f000 f8c2 	bl	80004c2 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800033e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000342:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = MFRC522_read(CommIrqReg);
 8000344:	2004      	movs	r0, #4
 8000346:	f000 f8ed 	bl	8000524 <MFRC522_read>
 800034a:	4603      	mov	r3, r0
 800034c:	773b      	strb	r3, [r7, #28]
        i--;
 800034e:	69bb      	ldr	r3, [r7, #24]
 8000350:	3b01      	subs	r3, #1
 8000352:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d00a      	beq.n	8000370 <MFRC522_ToCard+0xd4>
 800035a:	7f3b      	ldrb	r3, [r7, #28]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d105      	bne.n	8000370 <MFRC522_ToCard+0xd4>
 8000364:	7f3a      	ldrb	r2, [r7, #28]
 8000366:	7f7b      	ldrb	r3, [r7, #29]
 8000368:	4013      	ands	r3, r2
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0e9      	beq.n	8000344 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000370:	2180      	movs	r1, #128	@ 0x80
 8000372:	200d      	movs	r0, #13
 8000374:	f000 f885 	bl	8000482 <ClearBitMask>

    if (i != 0)
 8000378:	69bb      	ldr	r3, [r7, #24]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d052      	beq.n	8000424 <MFRC522_ToCard+0x188>
    {
        if(!(MFRC522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800037e:	2006      	movs	r0, #6
 8000380:	f000 f8d0 	bl	8000524 <MFRC522_read>
 8000384:	4603      	mov	r3, r0
 8000386:	f003 031b 	and.w	r3, r3, #27
 800038a:	2b00      	cmp	r3, #0
 800038c:	d148      	bne.n	8000420 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800038e:	2300      	movs	r3, #0
 8000390:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000392:	7f3a      	ldrb	r2, [r7, #28]
 8000394:	7fbb      	ldrb	r3, [r7, #30]
 8000396:	4013      	ands	r3, r2
 8000398:	b2db      	uxtb	r3, r3
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 80003a2:	2301      	movs	r3, #1
 80003a4:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	2b0c      	cmp	r3, #12
 80003aa:	d13b      	bne.n	8000424 <MFRC522_ToCard+0x188>
            {
               	n = MFRC522_read(FIFOLevelReg);
 80003ac:	200a      	movs	r0, #10
 80003ae:	f000 f8b9 	bl	8000524 <MFRC522_read>
 80003b2:	4603      	mov	r3, r0
 80003b4:	773b      	strb	r3, [r7, #28]
              	lastBits = MFRC522_read(ControlReg) & 0x07;
 80003b6:	200c      	movs	r0, #12
 80003b8:	f000 f8b4 	bl	8000524 <MFRC522_read>
 80003bc:	4603      	mov	r3, r0
 80003be:	f003 0307 	and.w	r3, r3, #7
 80003c2:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80003c4:	7dfb      	ldrb	r3, [r7, #23]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80003ca:	7f3b      	ldrb	r3, [r7, #28]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	00da      	lsls	r2, r3, #3
 80003d0:	7dfb      	ldrb	r3, [r7, #23]
 80003d2:	4413      	add	r3, r2
 80003d4:	461a      	mov	r2, r3
 80003d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	e004      	b.n	80003e6 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80003dc:	7f3b      	ldrb	r3, [r7, #28]
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	461a      	mov	r2, r3
 80003e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80003e4:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80003e6:	7f3b      	ldrb	r3, [r7, #28]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d101      	bne.n	80003f0 <MFRC522_ToCard+0x154>
                {
					n = 1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80003f0:	7f3b      	ldrb	r3, [r7, #28]
 80003f2:	2b10      	cmp	r3, #16
 80003f4:	d901      	bls.n	80003fa <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80003f6:	2310      	movs	r3, #16
 80003f8:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
 80003fe:	e00a      	b.n	8000416 <MFRC522_ToCard+0x17a>
                {
					backData[i] = MFRC522_read(FIFODataReg);
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	18d4      	adds	r4, r2, r3
 8000406:	2009      	movs	r0, #9
 8000408:	f000 f88c 	bl	8000524 <MFRC522_read>
 800040c:	4603      	mov	r3, r0
 800040e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	3301      	adds	r3, #1
 8000414:	61bb      	str	r3, [r7, #24]
 8000416:	7f3b      	ldrb	r3, [r7, #28]
 8000418:	69ba      	ldr	r2, [r7, #24]
 800041a:	429a      	cmp	r2, r3
 800041c:	d3f0      	bcc.n	8000400 <MFRC522_ToCard+0x164>
 800041e:	e001      	b.n	8000424 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000420:	2302      	movs	r3, #2
 8000422:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000424:	7ffb      	ldrb	r3, [r7, #31]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3724      	adds	r7, #36	@ 0x24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd90      	pop	{r4, r7, pc}

0800042e <AntennaON>:
{
	ClearBitMask(TxControlReg, 0x03);
}

void AntennaON()
{
 800042e:	b580      	push	{r7, lr}
 8000430:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 8000432:	2103      	movs	r1, #3
 8000434:	2014      	movs	r0, #20
 8000436:	f000 f844 	bl	80004c2 <SetBitMask>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}

0800043e <MFRC522_Init>:
	*GPIOB_ODR |= 1 << 7;
	delay_millisec(50);
}

void MFRC522_Init()
{
 800043e:	b580      	push	{r7, lr}
 8000440:	af00      	add	r7, sp, #0
	/* configure MFRC522 */
	MFRC522_write(CommandReg, 0x0F);	/* soft reset */
 8000442:	210f      	movs	r1, #15
 8000444:	2001      	movs	r0, #1
 8000446:	f000 f857 	bl	80004f8 <MFRC522_write>
	MFRC522_write(TModeReg, 0x80);		/* auto-start */
 800044a:	2180      	movs	r1, #128	@ 0x80
 800044c:	202a      	movs	r0, #42	@ 0x2a
 800044e:	f000 f853 	bl	80004f8 <MFRC522_write>
	MFRC522_write(TPrescalerReg, 0xA9);	/* f_timer = 13.56e6/(2 * A9h) ~= 39.882KHz -> T_timer ~= 25us */
 8000452:	21a9      	movs	r1, #169	@ 0xa9
 8000454:	202b      	movs	r0, #43	@ 0x2b
 8000456:	f000 f84f 	bl	80004f8 <MFRC522_write>
	MFRC522_write(TReloadRegH, 0x03); /* set reload value = 03E8h = 1000 */
 800045a:	2103      	movs	r1, #3
 800045c:	202c      	movs	r0, #44	@ 0x2c
 800045e:	f000 f84b 	bl	80004f8 <MFRC522_write>
	MFRC522_write(TReloadRegL, 0xE8);
 8000462:	21e8      	movs	r1, #232	@ 0xe8
 8000464:	202d      	movs	r0, #45	@ 0x2d
 8000466:	f000 f847 	bl	80004f8 <MFRC522_write>
	/* used more */
//	MFRC522_write(TPrescalerReg, 0x3E);
//	MFRC522_write(TReloadRegH, 0);
//	MFRC522_write(TReloadRegL, 30);

	MFRC522_write(TxASKReg, 0x40);		/* force 100% ASK */
 800046a:	2140      	movs	r1, #64	@ 0x40
 800046c:	2015      	movs	r0, #21
 800046e:	f000 f843 	bl	80004f8 <MFRC522_write>
	MFRC522_write(ModeReg, 0x3D);
 8000472:	213d      	movs	r1, #61	@ 0x3d
 8000474:	2011      	movs	r0, #17
 8000476:	f000 f83f 	bl	80004f8 <MFRC522_write>
	AntennaON();
 800047a:	f7ff ffd8 	bl	800042e <AntennaON>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}

08000482 <ClearBitMask>:

static void ClearBitMask(uint8_t reg_addr, uint8_t mask)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	4603      	mov	r3, r0
 800048a:	460a      	mov	r2, r1
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	4613      	mov	r3, r2
 8000490:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_read(reg_addr);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f845 	bl	8000524 <MFRC522_read>
 800049a:	4603      	mov	r3, r0
 800049c:	73fb      	strb	r3, [r7, #15]
    MFRC522_write(reg_addr, tmp & (~mask));  /* clear bit mask */
 800049e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004a2:	43db      	mvns	r3, r3
 80004a4:	b25a      	sxtb	r2, r3
 80004a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004aa:	4013      	ands	r3, r2
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	4611      	mov	r1, r2
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 f81f 	bl	80004f8 <MFRC522_write>
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <SetBitMask>:

static void SetBitMask(uint8_t reg_addr, uint8_t mask)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	4603      	mov	r3, r0
 80004ca:	460a      	mov	r2, r1
 80004cc:	71fb      	strb	r3, [r7, #7]
 80004ce:	4613      	mov	r3, r2
 80004d0:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_read(reg_addr);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f825 	bl	8000524 <MFRC522_read>
 80004da:	4603      	mov	r3, r0
 80004dc:	73fb      	strb	r3, [r7, #15]
    MFRC522_write(reg_addr, tmp | mask);  /* set bit mask */
 80004de:	7bfa      	ldrb	r2, [r7, #15]
 80004e0:	79bb      	ldrb	r3, [r7, #6]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 f804 	bl	80004f8 <MFRC522_write>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <MFRC522_write>:
 * @brief  This function is used to write 1 byte data into any register of MRFC522
 * @param  reg_address: address of the register to write data to
 * 		   data: data want to write
 */
void MFRC522_write(uint8_t reg_address, uint8_t data)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	460a      	mov	r2, r1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	4613      	mov	r3, r2
 8000506:	71bb      	strb	r3, [r7, #6]
	select_MFRC522();
 8000508:	f000 f8d4 	bl	80006b4 <select_MFRC522>
	SPI_Transmit(reg_address, data);
 800050c:	79ba      	ldrb	r2, [r7, #6]
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f874 	bl	8000600 <SPI_Transmit>
	NOT_select_MFRC522();
 8000518:	f000 f8e0 	bl	80006dc <NOT_select_MFRC522>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <MFRC522_read>:
/**
 * @brief  This function is used to read 1 byte data from any register of MRFC522
 * @param  reg_address: address of the register to read data from
 */
uint8_t MFRC522_read(uint8_t reg_address)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
	select_MFRC522();
 800052e:	f000 f8c1 	bl	80006b4 <select_MFRC522>
	uint8_t val = SPI_Receive(reg_address);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f809 	bl	800054c <SPI_Receive>
 800053a:	4603      	mov	r3, r0
 800053c:	73fb      	strb	r3, [r7, #15]
	NOT_select_MFRC522();
 800053e:	f000 f8cd 	bl	80006dc <NOT_select_MFRC522>
	return val;
 8000542:	7bfb      	ldrb	r3, [r7, #15]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <SPI_Receive>:

static uint8_t SPI_Receive(uint8_t reg_addr)
{
 800054c:	b480      	push	{r7}
 800054e:	b087      	sub	sp, #28
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	uint8_t* SPI_DR = (uint8_t*) (SPI1_BASE_ADDR  + 0x0C);
 8000556:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <SPI_Receive+0xac>)
 8000558:	617b      	str	r3, [r7, #20]
	uint16_t* SPI_SR = (uint16_t*) (SPI1_BASE_ADDR  + 0x08);
 800055a:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <SPI_Receive+0xb0>)
 800055c:	613b      	str	r3, [r7, #16]

	/* data send sequence */
	while (((*SPI_SR >> 1) & 1) == 0);	/* wait until the TX buffer is empty */
 800055e:	bf00      	nop
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	085b      	lsrs	r3, r3, #1
 8000566:	b29b      	uxth	r3, r3
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0f7      	beq.n	8000560 <SPI_Receive+0x14>
	*SPI_DR = READ | (reg_addr << 1);	/* send register address */
 8000570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	b25b      	sxtb	r3, r3
 8000578:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800057c:	b25b      	sxtb	r3, r3
 800057e:	b2da      	uxtb	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	701a      	strb	r2, [r3, #0]
	while (((*SPI_SR >> 7) & 1) == 1);	/* wait until SPI is free */
 8000584:	bf00      	nop
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	09db      	lsrs	r3, r3, #7
 800058c:	b29b      	uxth	r3, r3
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1f7      	bne.n	8000586 <SPI_Receive+0x3a>

	/* data read sequence */
	while ((*SPI_SR & 1) == 0);			/* wait until the RX buffer is not empty */
 8000596:	bf00      	nop
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0f9      	beq.n	8000598 <SPI_Receive+0x4c>
	uint8_t dummy = *SPI_DR;			/* read dummy data */
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	73fb      	strb	r3, [r7, #15]

	/* data send sequence */
	while (((*SPI_SR >> 1) & 1) == 0);	/* wait until the TX buffer is empty */
 80005aa:	bf00      	nop
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	085b      	lsrs	r3, r3, #1
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f7      	beq.n	80005ac <SPI_Receive+0x60>
	*SPI_DR = 0x00;						/* send dummy address */
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	while (((*SPI_SR >> 7) & 1) == 1);	/* wait until SPI is free */
 80005c2:	bf00      	nop
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	09db      	lsrs	r3, r3, #7
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f7      	bne.n	80005c4 <SPI_Receive+0x78>

	/* data read sequence */
	while ((*SPI_SR & 1) == 0);			/* wait until the RX buffer is not empty */
 80005d4:	bf00      	nop
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <SPI_Receive+0x8a>
	uint8_t data = *SPI_DR;				/* read data */
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	73bb      	strb	r3, [r7, #14]

	return data;
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	4001300c 	.word	0x4001300c
 80005fc:	40013008 	.word	0x40013008

08000600 <SPI_Transmit>:

static void SPI_Transmit(uint8_t reg_addr, uint8_t _data)
{
 8000600:	b480      	push	{r7}
 8000602:	b087      	sub	sp, #28
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	460a      	mov	r2, r1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	4613      	mov	r3, r2
 800060e:	71bb      	strb	r3, [r7, #6]
	uint8_t* SPI_DR = (uint8_t*) (SPI1_BASE_ADDR  + 0x0C);
 8000610:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <SPI_Transmit+0xac>)
 8000612:	617b      	str	r3, [r7, #20]
	uint16_t* SPI_SR = (uint16_t*) (SPI1_BASE_ADDR  + 0x08);
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <SPI_Transmit+0xb0>)
 8000616:	613b      	str	r3, [r7, #16]

	/* data send sequence */
	while (((*SPI_SR >> 1) & 1) == 0);	/* wait until the TX buffer is empty */
 8000618:	bf00      	nop
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	085b      	lsrs	r3, r3, #1
 8000620:	b29b      	uxth	r3, r3
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f7      	beq.n	800061a <SPI_Transmit+0x1a>
	*SPI_DR = (reg_addr << 1) & WRITE;	/* send register address */
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000634:	b2da      	uxtb	r2, r3
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	701a      	strb	r2, [r3, #0]
	while (((*SPI_SR >> 7) & 1) == 1);	/* wait until SPI is free */
 800063a:	bf00      	nop
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	09db      	lsrs	r3, r3, #7
 8000642:	b29b      	uxth	r3, r3
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1f7      	bne.n	800063c <SPI_Transmit+0x3c>

	/* data read sequence */
	while ((*SPI_SR & 1) == 0);			/* wait until the RX buffer is not empty */
 800064c:	bf00      	nop
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f9      	beq.n	800064e <SPI_Transmit+0x4e>
	uint8_t dummy = *SPI_DR;			/* read dummy data */
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	73fb      	strb	r3, [r7, #15]

	/* data send sequence */
	while (((*SPI_SR >> 1) & 1) == 0);	/* wait until the TX buffer is empty */
 8000660:	bf00      	nop
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	085b      	lsrs	r3, r3, #1
 8000668:	b29b      	uxth	r3, r3
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f7      	beq.n	8000662 <SPI_Transmit+0x62>
	*SPI_DR = _data;						/* send dummy address */
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	79ba      	ldrb	r2, [r7, #6]
 8000676:	701a      	strb	r2, [r3, #0]
	while (((*SPI_SR >> 7) & 1) == 1);	/* wait until SPI is free */
 8000678:	bf00      	nop
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	09db      	lsrs	r3, r3, #7
 8000680:	b29b      	uxth	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <SPI_Transmit+0x7a>

	/* data read sequence */
	while ((*SPI_SR & 1) == 0);			/* wait until the RX buffer is not empty */
 800068a:	bf00      	nop
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f9      	beq.n	800068c <SPI_Transmit+0x8c>
	dummy = *SPI_DR;					/* read dummy data */
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	73fb      	strb	r3, [r7, #15]
}
 800069e:	bf00      	nop
 80006a0:	371c      	adds	r7, #28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	4001300c 	.word	0x4001300c
 80006b0:	40013008 	.word	0x40013008

080006b4 <select_MFRC522>:

/**
 * brief  This function is used to select slave by pull SS to LOW
 */
static void select_MFRC522()
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
	uint32_t* GPIOB_ODR = (uint32_t*) (GPIOB_BASE_ADDR + 0x14);
 80006ba:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <select_MFRC522+0x24>)
 80006bc:	607b      	str	r3, [r7, #4]
	*GPIOB_ODR &= ~(1 << 6);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	601a      	str	r2, [r3, #0]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40020414 	.word	0x40020414

080006dc <NOT_select_MFRC522>:

/**
 * brief  This function is used to select slave by set SS to HIGH
 */
static void NOT_select_MFRC522()
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
	uint32_t* GPIOB_ODR = (uint32_t*) (GPIOB_BASE_ADDR + 0x14);
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <NOT_select_MFRC522+0x24>)
 80006e4:	607b      	str	r3, [r7, #4]
	*GPIOB_ODR |= 1 << 6;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	601a      	str	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40020414 	.word	0x40020414

08000704 <SPI_Init>:
 * PB7	-> RST
 * GND	-> GND
 * VCC	-> 3V
 */
void SPI_Init()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
	AHB1_clock_enable(AHB1_GPIOB);
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f87e 	bl	800080c <AHB1_clock_enable>
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 8000710:	4b2e      	ldr	r3, [pc, #184]	@ (80007cc <SPI_Init+0xc8>)
 8000712:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOB_ODR   = (uint32_t*) (GPIOB_BASE_ADDR + 0x14);
 8000714:	4b2e      	ldr	r3, [pc, #184]	@ (80007d0 <SPI_Init+0xcc>)
 8000716:	60bb      	str	r3, [r7, #8]
	uint32_t* GPIOB_AFRL  = (uint32_t*) (GPIOB_BASE_ADDR + 0x20);
 8000718:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <SPI_Init+0xd0>)
 800071a:	607b      	str	r3, [r7, #4]

	/* set PB6,7 as OUTPUT, PB3,4,5 as AF */
	*GPIOB_MODER &= ~(0x3ff << (3 * 2));
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000724:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |= (0b10 << (3 * 2)) | (0b10 << (4 * 2)) | (0b10 << (5 * 2)) | (0b01 << (6 * 2)) | (0b01 << (7 * 2));
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f443 42b5 	orr.w	r2, r3, #23168	@ 0x5a80
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	601a      	str	r2, [r3, #0]

	/* pull NSS (PB6) and RST (PB7) to HIGH */
	*GPIOB_ODR |= (1 << 6) | (1 << 7);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	601a      	str	r2, [r3, #0]

	/* select AF05 for PB3,4,5 */
	*GPIOB_AFRL &= ~( (0xf << (3 * 4)) | (0xf << (4 * 4)) | (0xf << (5 * 4)) );
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800074c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	6013      	str	r3, [r2, #0]
	*GPIOB_AFRL |= (5 << (3 * 4)) | (5 << (4 * 4)) | (5 << (5 * 4));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 800075c:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	6013      	str	r3, [r2, #0]

	APB2_clock_enable(APB2_SPI1);
 8000764:	200c      	movs	r0, #12
 8000766:	f000 f839 	bl	80007dc <APB2_clock_enable>
	uint16_t* SPI_CR1 = (uint16_t*) (SPI1_BASE_ADDR + 0x00);
 800076a:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <SPI_Init+0xd4>)
 800076c:	603b      	str	r3, [r7, #0]

	/* set STM32 as master */
	*SPI_CR1 |= 1 << 2;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	b29a      	uxth	r2, r3
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	801a      	strh	r2, [r3, #0]

	/* set baud rate = 1Mbps (MRFC522 can handle up to 10Mbps) */
	*SPI_CR1 &= ~(0b111 << 3);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000784:	b29a      	uxth	r2, r3
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= 0b100 << 3;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	b29a      	uxth	r2, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	801a      	strh	r2, [r3, #0]

	/* software slave management */
	*SPI_CR1 |= 1 << 9;
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= 1 << 8;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	801a      	strh	r2, [r3, #0]

	/* enable SPI */
	*SPI_CR1 |= 1 << 6;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007bc:	b29a      	uxth	r2, r3
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	801a      	strh	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020414 	.word	0x40020414
 80007d4:	40020420 	.word	0x40020420
 80007d8:	40013000 	.word	0x40013000

080007dc <APB2_clock_enable>:
/**
 * @brief  enable 32MHz clock for APB2 peripheral
 * @param  peripheral: name of the APB2 peripheral you want enable clock
 */
void APB2_clock_enable(APB2_periph_t peripheral)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	uint32_t* RCC_APB2ENR = (uint32_t*) (RCC_BASE_ADDR + 0x44);
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <APB2_clock_enable+0x2c>)
 80007e8:	60fb      	str	r3, [r7, #12]
	*RCC_APB2ENR |= 1 << peripheral;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	431a      	orrs	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	40023844 	.word	0x40023844

0800080c <AHB1_clock_enable>:
/**
 * @brief  enable 32MHz clock for AHB1 peripheral
 * @param  peripheral: name of the AHB1 peripheral you want enable clock
 */
void AHB1_clock_enable(AHB1_periph_t peripheral)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	uint32_t* RCC_AHB1ENR = (uint32_t*) (RCC_BASE_ADDR + 0x30);
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <AHB1_clock_enable+0x2c>)
 8000818:	60fb      	str	r3, [r7, #12]
	*RCC_AHB1ENR |= 1 << peripheral;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f202 	lsl.w	r2, r1, r2
 8000826:	431a      	orrs	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	601a      	str	r2, [r3, #0]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	40023830 	.word	0x40023830

0800083c <RCC_Init>:

/**
 * @brief  This function is used for configure SYSTEM CLOCK = 32MHz
 */
void RCC_Init()
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
	uint32_t* RCC_CR = (uint32_t*) (RCC_BASE_ADDR + 0x00);
 8000842:	4b34      	ldr	r3, [pc, #208]	@ (8000914 <RCC_Init+0xd8>)
 8000844:	60fb      	str	r3, [r7, #12]
	uint32_t* RCC_PLLCFGR = (uint32_t*) (RCC_BASE_ADDR + 0x04);
 8000846:	4b34      	ldr	r3, [pc, #208]	@ (8000918 <RCC_Init+0xdc>)
 8000848:	60bb      	str	r3, [r7, #8]
	uint32_t* RCC_CFGR = (uint32_t*) (RCC_BASE_ADDR + 0x08);
 800084a:	4b34      	ldr	r3, [pc, #208]	@ (800091c <RCC_Init+0xe0>)
 800084c:	607b      	str	r3, [r7, #4]

	/* select HSE as PLL clock entry */
	*RCC_PLLCFGR |= 1 << 22;
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	601a      	str	r2, [r3, #0]

	/* select M = 8 -> f_PLL = 1MHz */
	*RCC_PLLCFGR &= ~(0x3F << 0);
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= 8 << 0;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f043 0208 	orr.w	r2, r3, #8
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	601a      	str	r2, [r3, #0]

	/* select N = 128 -> f_PLL = 128MHz */
	*RCC_PLLCFGR &= ~(0x1FF << 6);
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800087a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	6013      	str	r3, [r2, #0]
	*RCC_PLLCFGR |= 128 << 6;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	601a      	str	r2, [r3, #0]

	/* select P = 4 -> f_PLL = 32MHz */
	*RCC_PLLCFGR &= ~(0b11 << 16);
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= 0b01 << 16;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]

	/* enable HSE clock */
	*RCC_CR |= 1 << 16;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	601a      	str	r2, [r3, #0]

	/* wait until HSE clock is ready */
	while (((*RCC_CR >> 17) & 1) == 0);
 80008b2:	bf00      	nop
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	0c5b      	lsrs	r3, r3, #17
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f8      	beq.n	80008b4 <RCC_Init+0x78>

	/* enable PLL clock */
	*RCC_CR |= 1 << 24;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	601a      	str	r2, [r3, #0]

	/* wait until PLL clock is ready */
	while (((*RCC_CR >> 25) & 1) == 0);
 80008ce:	bf00      	nop
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	0e5b      	lsrs	r3, r3, #25
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f8      	beq.n	80008d0 <RCC_Init+0x94>

	/* select PLL as system clock */
	*RCC_CFGR &= ~(0b11 << 0);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f023 0203 	bic.w	r2, r3, #3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
	*RCC_CFGR |= 0b10 << 0;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f043 0202 	orr.w	r2, r3, #2
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	601a      	str	r2, [r3, #0]

	/* wait until PLL is used as the system clock */
	while (((*RCC_CFGR >> 2) & 0b11) != 0b10);
 80008f6:	bf00      	nop
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	089b      	lsrs	r3, r3, #2
 80008fe:	f003 0303 	and.w	r3, r3, #3
 8000902:	2b02      	cmp	r3, #2
 8000904:	d1f8      	bne.n	80008f8 <RCC_Init+0xbc>
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	40023800 	.word	0x40023800
 8000918:	40023804 	.word	0x40023804
 800091c:	40023808 	.word	0x40023808

08000920 <main>:
#include "timer.h"
#include "MFRC522.h"
int tmp = 0;
uint8_t str[16];
int main()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	RCC_Init();
 8000924:	f7ff ff8a 	bl	800083c <RCC_Init>
	TIM_Init();
 8000928:	f000 f8b6 	bl	8000a98 <TIM_Init>
	SPI_Init();
 800092c:	f7ff feea 	bl	8000704 <SPI_Init>
	MFRC522_Init();
 8000930:	f7ff fd85 	bl	800043e <MFRC522_Init>

	while (1)
	{
		tmp = MFRC522_Request(PICC_REQIDL, str);
 8000934:	4909      	ldr	r1, [pc, #36]	@ (800095c <main+0x3c>)
 8000936:	2026      	movs	r0, #38	@ 0x26
 8000938:	f7ff fc4e 	bl	80001d8 <MFRC522_Request>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <main+0x40>)
 8000942:	601a      	str	r2, [r3, #0]
		tmp = MFRC522_Anticoll(str);
 8000944:	4805      	ldr	r0, [pc, #20]	@ (800095c <main+0x3c>)
 8000946:	f7ff fc6c 	bl	8000222 <MFRC522_Anticoll>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <main+0x40>)
 8000950:	601a      	str	r2, [r3, #0]
		delay_sec(3);
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f848 	bl	80009e8 <delay_sec>
		tmp = MFRC522_Request(PICC_REQIDL, str);
 8000958:	bf00      	nop
 800095a:	e7eb      	b.n	8000934 <main+0x14>
 800095c:	20000024 	.word	0x20000024
 8000960:	20000020 	.word	0x20000020

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <NMI_Handler+0x4>

0800096c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <MemManage_Handler+0x4>

0800097c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <UsageFault_Handler+0x4>

0800098c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ba:	f000 f8d1 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <delay_sec>:
	cnt = 0;
	while (cnt < time);
}

void delay_sec(uint32_t time)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	sec_config();
 80009f0:	f000 f82e 	bl	8000a50 <sec_config>
	cnt = 0;
 80009f4:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <delay_sec+0x2c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
	while (cnt < time);
 80009fa:	bf00      	nop
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <delay_sec+0x2c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d8f9      	bhi.n	80009fc <delay_sec+0x14>
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000034 	.word	0x20000034

08000a18 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler()
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
	cnt++;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8000a26:	6013      	str	r3, [r2, #0]
	uint16_t* TIM1_SR  = (uint16_t*) (TIM1_BASE_ADDR + 0x10);
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8000a2a:	607b      	str	r3, [r7, #4]
	*TIM1_SR &= ~1;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	f023 0301 	bic.w	r3, r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	801a      	strh	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000034 	.word	0x20000034
 8000a4c:	40010010 	.word	0x40010010

08000a50 <sec_config>:
	/* (force) generate update */
	*TIM1_EGR |= 1 << 0;
}

static void sec_config()
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
	uint16_t* TIM1_PSC = (uint16_t*) (TIM1_BASE_ADDR + 0x28);
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <sec_config+0x3c>)
 8000a58:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM1_ARR = (uint16_t*) (TIM1_BASE_ADDR + 0x2C);
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <sec_config+0x40>)
 8000a5c:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM1_EGR = (uint16_t*) (TIM1_BASE_ADDR + 0x14);
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <sec_config+0x44>)
 8000a60:	607b      	str	r3, [r7, #4]
	/* set CK_CNT = 1kHz -> 1 Tick = 1ms */
	*TIM1_PSC = 32000 - 1;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000a68:	801a      	strh	r2, [r3, #0]

	/* set auto-reload value -> 1000 Tick = 1s */
	*TIM1_ARR = 1000 - 1;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a70:	801a      	strh	r2, [r3, #0]

	/* (force) generate update */
	*TIM1_EGR |= 1 << 0;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	801a      	strh	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40010028 	.word	0x40010028
 8000a90:	4001002c 	.word	0x4001002c
 8000a94:	40010014 	.word	0x40010014

08000a98 <TIM_Init>:

/**
 * @brief  this function is used to initial timer1
 */
void TIM_Init()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
	APB2_clock_enable(APB2_TIM1);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fe9c 	bl	80007dc <APB2_clock_enable>
	uint16_t* TIM1_PSC  = (uint16_t*) (TIM1_BASE_ADDR + 0x28);
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <TIM_Init+0x60>)
 8000aa6:	617b      	str	r3, [r7, #20]
	uint16_t* TIM1_DIER = (uint16_t*) (TIM1_BASE_ADDR + 0x0C);
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <TIM_Init+0x64>)
 8000aaa:	613b      	str	r3, [r7, #16]
	uint16_t* TIM1_CR1  = (uint16_t*) (TIM1_BASE_ADDR + 0x00);
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <TIM_Init+0x68>)
 8000aae:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM1_ARR  = (uint16_t*) (TIM1_BASE_ADDR + 0x2C);
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <TIM_Init+0x6c>)
 8000ab2:	60bb      	str	r3, [r7, #8]
	uint32_t* NVIC_ISER0 = (uint32_t*) (0xE000E100);
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <TIM_Init+0x70>)
 8000ab6:	607b      	str	r3, [r7, #4]

	/* set CK_CNT = 1kHz */
	*TIM1_PSC = 32000 - 1;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000abe:	801a      	strh	r2, [r3, #0]

	/* set auto-reload value */
	*TIM1_ARR = 1000;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ac6:	801a      	strh	r2, [r3, #0]

	/* enable update interrupt */
	*TIM1_DIER |= 1 << 0;
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	801a      	strh	r2, [r3, #0]

	/* interrupt set-enable */
	*NVIC_ISER0 |= 1 << 25;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]

	/* enable counter */
	*TIM1_CR1 |= 1 << 0;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	801a      	strh	r2, [r3, #0]
}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40010028 	.word	0x40010028
 8000afc:	4001000c 	.word	0x4001000c
 8000b00:	40010000 	.word	0x40010000
 8000b04:	4001002c 	.word	0x4001002c
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b10:	f7ff ff58 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	@ (8000b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f000 f825 	bl	8000b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff feef 	bl	8000920 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b50:	08000bf0 	.word	0x08000bf0
  ldr r2, =_sbss
 8000b54:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b58:	2000003c 	.word	0x2000003c

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000038 	.word	0x20000038

08000b88 <__libc_init_array>:
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8000bc0 <__libc_init_array+0x38>)
 8000b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8000bc4 <__libc_init_array+0x3c>)
 8000b8e:	1b64      	subs	r4, r4, r5
 8000b90:	10a4      	asrs	r4, r4, #2
 8000b92:	2600      	movs	r6, #0
 8000b94:	42a6      	cmp	r6, r4
 8000b96:	d109      	bne.n	8000bac <__libc_init_array+0x24>
 8000b98:	4d0b      	ldr	r5, [pc, #44]	@ (8000bc8 <__libc_init_array+0x40>)
 8000b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8000bcc <__libc_init_array+0x44>)
 8000b9c:	f000 f818 	bl	8000bd0 <_init>
 8000ba0:	1b64      	subs	r4, r4, r5
 8000ba2:	10a4      	asrs	r4, r4, #2
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	42a6      	cmp	r6, r4
 8000ba8:	d105      	bne.n	8000bb6 <__libc_init_array+0x2e>
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bb0:	4798      	blx	r3
 8000bb2:	3601      	adds	r6, #1
 8000bb4:	e7ee      	b.n	8000b94 <__libc_init_array+0xc>
 8000bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bba:	4798      	blx	r3
 8000bbc:	3601      	adds	r6, #1
 8000bbe:	e7f2      	b.n	8000ba6 <__libc_init_array+0x1e>
 8000bc0:	08000be8 	.word	0x08000be8
 8000bc4:	08000be8 	.word	0x08000be8
 8000bc8:	08000be8 	.word	0x08000be8
 8000bcc:	08000bec 	.word	0x08000bec

08000bd0 <_init>:
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	bf00      	nop
 8000bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd6:	bc08      	pop	{r3}
 8000bd8:	469e      	mov	lr, r3
 8000bda:	4770      	bx	lr

08000bdc <_fini>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	bf00      	nop
 8000be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be2:	bc08      	pop	{r3}
 8000be4:	469e      	mov	lr, r3
 8000be6:	4770      	bx	lr
