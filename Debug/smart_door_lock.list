
smart_door_lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000550  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e8  080006e8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e8  080006e8  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006e8  080006e8  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006e8  080006e8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e8  080006e8  000016e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006ec  080006ec  000016ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006f0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080006f4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080006f4  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001841  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007e7  00000000  00000000  00003875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00004060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b1  00000000  00000000  000042d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014271  00000000  00000000  00004481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003987  00000000  00000000  000186f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f014  00000000  00000000  0001c079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b08d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000754  00000000  00000000  0009b0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009b824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080006d0 	.word	0x080006d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080006d0 	.word	0x080006d0

080001d8 <APB2_clock_enable>:
/**
 * @brief  enable 32MHz clock for APB2 peripheral
 * @param  peripheral: name of the APB2 peripheral you want enable clock
 */
void APB2_clock_enable(APB2_periph_t peripheral)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	uint32_t* RCC_APB2ENR = (uint32_t*) (RCC_BASE_ADDR + 0x44);
 80001e2:	4b08      	ldr	r3, [pc, #32]	@ (8000204 <APB2_clock_enable+0x2c>)
 80001e4:	60fb      	str	r3, [r7, #12]
	*RCC_APB2ENR |= 1 << peripheral;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79fa      	ldrb	r2, [r7, #7]
 80001ec:	2101      	movs	r1, #1
 80001ee:	fa01 f202 	lsl.w	r2, r1, r2
 80001f2:	431a      	orrs	r2, r3
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	601a      	str	r2, [r3, #0]
}
 80001f8:	bf00      	nop
 80001fa:	3714      	adds	r7, #20
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	40023844 	.word	0x40023844

08000208 <AHB1_clock_enable>:
/**
 * @brief  enable 32MHz clock for AHB1 peripheral
 * @param  peripheral: name of the AHB1 peripheral you want enable clock
 */
void AHB1_clock_enable(AHB1_periph_t peripheral)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	uint32_t* RCC_AHB1ENR = (uint32_t*) (RCC_BASE_ADDR + 0x30);
 8000212:	4b08      	ldr	r3, [pc, #32]	@ (8000234 <AHB1_clock_enable+0x2c>)
 8000214:	60fb      	str	r3, [r7, #12]
	*RCC_AHB1ENR |= 1 << peripheral;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	79fa      	ldrb	r2, [r7, #7]
 800021c:	2101      	movs	r1, #1
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	431a      	orrs	r2, r3
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	601a      	str	r2, [r3, #0]
}
 8000228:	bf00      	nop
 800022a:	3714      	adds	r7, #20
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	40023830 	.word	0x40023830

08000238 <RCC_Init>:

/** SYSTEM CLOCK = 32MHz */
void RCC_Init()
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
	uint32_t* RCC_CR = (uint32_t*) (RCC_BASE_ADDR + 0x00);
 800023e:	4b31      	ldr	r3, [pc, #196]	@ (8000304 <RCC_Init+0xcc>)
 8000240:	60fb      	str	r3, [r7, #12]
	uint32_t* RCC_PLLCFGR = (uint32_t*) (RCC_BASE_ADDR + 0x04);
 8000242:	4b31      	ldr	r3, [pc, #196]	@ (8000308 <RCC_Init+0xd0>)
 8000244:	60bb      	str	r3, [r7, #8]
	uint32_t* RCC_CFGR = (uint32_t*) (RCC_BASE_ADDR + 0x08);
 8000246:	4b31      	ldr	r3, [pc, #196]	@ (800030c <RCC_Init+0xd4>)
 8000248:	607b      	str	r3, [r7, #4]

	/* select HSE as PLL clock entry */
	*RCC_PLLCFGR |= 1 << 22;
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	601a      	str	r2, [r3, #0]

	/* select M = 8 -> f_PLL = 1MHz */
	*RCC_PLLCFGR &= ~(0x3F << 0);
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= 8 << 0;
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 0208 	orr.w	r2, r3, #8
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	601a      	str	r2, [r3, #0]

	/* select N = 64 -> f_PLL = 64MHz */
	*RCC_PLLCFGR &= ~(0x1FF << 6);
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	6013      	str	r3, [r2, #0]
	*RCC_PLLCFGR |= 64 << 6;
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	601a      	str	r2, [r3, #0]

	/* select P = 2 -> f_PLL = 32MHz */
	*RCC_PLLCFGR &= ~(0b11 << 16);
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	601a      	str	r2, [r3, #0]

	/* enable HSE clock */
	*RCC_CR |= 1 << 16;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	601a      	str	r2, [r3, #0]

	/* wait until HSE clock is ready */
	while (((*RCC_CR >> 17) & 1) == 0);
 80002a2:	bf00      	nop
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	0c5b      	lsrs	r3, r3, #17
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f8      	beq.n	80002a4 <RCC_Init+0x6c>

	/* enable PLL clock */
	*RCC_CR |= 1 << 24;
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	601a      	str	r2, [r3, #0]

	/* wait until PLL clock is ready */
	while (((*RCC_CR >> 25) & 1) == 0);
 80002be:	bf00      	nop
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	0e5b      	lsrs	r3, r3, #25
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f8      	beq.n	80002c0 <RCC_Init+0x88>

	/* select PLL as system clock */
	*RCC_CFGR &= ~(0b11 << 0);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f023 0203 	bic.w	r2, r3, #3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
	*RCC_CFGR |= 0b10 << 0;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0202 	orr.w	r2, r3, #2
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	601a      	str	r2, [r3, #0]

	/* wait until PLL is used as the system clock */
	while (((*RCC_CFGR >> 2) & 0b11) != 0b10);
 80002e6:	bf00      	nop
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	089b      	lsrs	r3, r3, #2
 80002ee:	f003 0303 	and.w	r3, r3, #3
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d1f8      	bne.n	80002e8 <RCC_Init+0xb0>
}
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40023804 	.word	0x40023804
 800030c:	40023808 	.word	0x40023808

08000310 <LED_Init>:
#include "clock.h"
#include "timer.h"
#include "mfrc522.h"

void LED_Init()
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
	AHB1_clock_enable(AHB1_GPIOD);
 8000316:	2003      	movs	r0, #3
 8000318:	f7ff ff76 	bl	8000208 <AHB1_clock_enable>
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOD_BASE + 0x00);
 800031c:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <LED_Init+0x30>)
 800031e:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0b11 << (15 * 2));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << (15 * 2));
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40020c00 	.word	0x40020c00

08000344 <LED_Ctrl>:
void LED_Ctrl(char on)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	uint32_t* GPIOD_ODR = (uint32_t*) (GPIOD_BASE + 0x14);
 800034e:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <LED_Ctrl+0x3c>)
 8000350:	60fb      	str	r3, [r7, #12]
	if (on)
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d006      	beq.n	8000366 <LED_Ctrl+0x22>
	{
		*GPIOD_ODR |= 1 << 15;
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*GPIOD_ODR &= ~(1 << 15);
	}
}
 8000364:	e005      	b.n	8000372 <LED_Ctrl+0x2e>
		*GPIOD_ODR &= ~(1 << 15);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	601a      	str	r2, [r3, #0]
}
 8000372:	bf00      	nop
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40020c14 	.word	0x40020c14

08000384 <main>:
int tmp;
int main()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	RCC_Init();
 8000388:	f7ff ff56 	bl	8000238 <RCC_Init>
	SPI_Init();
 800038c:	f000 f812 	bl	80003b4 <SPI_Init>
	TIM_Init();
 8000390:	f000 f902 	bl	8000598 <TIM_Init>
	LED_Init();
 8000394:	f7ff ffbc 	bl	8000310 <LED_Init>
	while (1)
	{
//		tmp = MFRC522_readDATA(0x37);
		LED_Ctrl(1);
 8000398:	2001      	movs	r0, #1
 800039a:	f7ff ffd3 	bl	8000344 <LED_Ctrl>
		delay_sec(2);
 800039e:	2002      	movs	r0, #2
 80003a0:	f000 f8e2 	bl	8000568 <delay_sec>
		LED_Ctrl(0);
 80003a4:	2000      	movs	r0, #0
 80003a6:	f7ff ffcd 	bl	8000344 <LED_Ctrl>
		delay_sec(4);
 80003aa:	2004      	movs	r0, #4
 80003ac:	f000 f8dc 	bl	8000568 <delay_sec>
		LED_Ctrl(1);
 80003b0:	bf00      	nop
 80003b2:	e7f1      	b.n	8000398 <main+0x14>

080003b4 <SPI_Init>:
 * PE4  -> SS (SDA)
 * PE5	-> MISO
 * PE6	-> MOSI
 */
void SPI_Init()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
	AHB1_clock_enable(AHB1_GPIOE);
 80003ba:	2004      	movs	r0, #4
 80003bc:	f7ff ff24 	bl	8000208 <AHB1_clock_enable>
	uint32_t* GPIOE_MODER = (uint32_t*) (GPIOE_BASE_ADDR + 0x00);
 80003c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000480 <SPI_Init+0xcc>)
 80003c2:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOE_AFRL  = (uint32_t*) (GPIOE_BASE_ADDR + 0x20);
 80003c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000484 <SPI_Init+0xd0>)
 80003c6:	60bb      	str	r3, [r7, #8]
	uint32_t* GPIOE_ODR   = (uint32_t*) (GPIOE_BASE_ADDR + 0x14);
 80003c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000488 <SPI_Init+0xd4>)
 80003ca:	607b      	str	r3, [r7, #4]

	/* set PE2 as output, PE4,5,6 as AF */
	*GPIOE_MODER &= ~((0x3F << (4 * 2)) | (0b11 << (2 * 2)));
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80003d4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	6013      	str	r3, [r2, #0]
	*GPIOE_MODER |= (0b10 << (2 * 2)) | (0b01 << (4 * 2)) | (0b10 << (5 * 2)) | (0b10 << (6 * 2));
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f443 5324 	orr.w	r3, r3, #10496	@ 0x2900
 80003e4:	f043 0320 	orr.w	r3, r3, #32
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	6013      	str	r3, [r2, #0]

	/* select AF05 for PE4,5,6 */
	*GPIOE_AFRL &= ~((0xf << (5 * 4)) | (0xf << (6 * 4) | (0xf << (2 * 4))));
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f023 230f 	bic.w	r3, r3, #251662080	@ 0xf000f00
 80003f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	6013      	str	r3, [r2, #0]
	*GPIOE_AFRL |= (5 << (5 * 4)) | (5 << (6 * 4)) | (5 << (2 * 4));
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f043 2305 	orr.w	r3, r3, #83887360	@ 0x5000500
 8000404:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	6013      	str	r3, [r2, #0]

	/* set NSS (PE4) to high to un-active slave */
	*GPIOE_ODR |= 1 << 4;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f043 0210 	orr.w	r2, r3, #16
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	601a      	str	r2, [r3, #0]
//	*GPIOE_ODR &= ~(1 << 4);
	APB2_clock_enable(APB2_SPI4);
 8000418:	200d      	movs	r0, #13
 800041a:	f7ff fedd 	bl	80001d8 <APB2_clock_enable>
	uint16_t* SPI_CR1 = (uint16_t*) (SPI4_BASE_ADDR + 0x00);
 800041e:	4b1b      	ldr	r3, [pc, #108]	@ (800048c <SPI_Init+0xd8>)
 8000420:	603b      	str	r3, [r7, #0]

	/* set STM32 as master */
	*SPI_CR1 |= 1 << 2;
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	881b      	ldrh	r3, [r3, #0]
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	b29a      	uxth	r2, r3
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	801a      	strh	r2, [r3, #0]

	/* set baud rate = 1Mbps (MRFC can handle up to 10Mbps) */
	*SPI_CR1 &= ~(0b111 << 3);
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000438:	b29a      	uxth	r2, r3
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= 0b100 << 3;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	b29a      	uxth	r2, r3
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	801a      	strh	r2, [r3, #0]

	/* software slave management */
	*SPI_CR1 |= 1 << 9;
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000454:	b29a      	uxth	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= 1 << 8;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000462:	b29a      	uxth	r2, r3
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	801a      	strh	r2, [r3, #0]

	/* enable SPI */
	*SPI_CR1 |= 1 << 6;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000470:	b29a      	uxth	r2, r3
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	801a      	strh	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	40021020 	.word	0x40021020
 8000488:	40021014 	.word	0x40021014
 800048c:	40013400 	.word	0x40013400

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <NMI_Handler+0x4>

08000498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <MemManage_Handler+0x4>

080004a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e6:	f000 f8bb 	bl	8000660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <SystemInit+0x20>)
 80004f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004fa:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <SystemInit+0x20>)
 80004fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <TIM1_UP_TIM10_IRQHandler>:
#include "clock.h"
#include "timer.h"

static int cnt = 0;
void TIM1_UP_TIM10_IRQHandler()
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
	uint16_t* TIM1_SR  = (uint16_t*) (TIM1_BASE_ADDR + 0x10);
 800051a:	4b10      	ldr	r3, [pc, #64]	@ (800055c <TIM1_UP_TIM10_IRQHandler+0x48>)
 800051c:	607b      	str	r3, [r7, #4]
	uint16_t* TIM1_CNT = (uint16_t*) (TIM1_BASE_ADDR + 0x24);
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 8000520:	603b      	str	r3, [r7, #0]

	/* reset counter value */
	*TIM1_CNT = 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2200      	movs	r2, #0
 8000526:	801a      	strh	r2, [r3, #0]
	while ((*TIM1_SR & 1) == 0);
 8000528:	bf00      	nop
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <TIM1_UP_TIM10_IRQHandler+0x16>
	*TIM1_SR &= ~1;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	f023 0301 	bic.w	r3, r3, #1
 800053e:	b29a      	uxth	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	801a      	strh	r2, [r3, #0]
	cnt++;
 8000544:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <TIM1_UP_TIM10_IRQHandler+0x50>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800054c:	6013      	str	r3, [r2, #0]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40010010 	.word	0x40010010
 8000560:	40010024 	.word	0x40010024
 8000564:	20000020 	.word	0x20000020

08000568 <delay_sec>:


void delay_sec(uint32_t time)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	cnt = 0;
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <delay_sec+0x2c>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
	while (cnt < time);
 8000576:	bf00      	nop
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <delay_sec+0x2c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4293      	cmp	r3, r2
 8000582:	d8f9      	bhi.n	8000578 <delay_sec+0x10>
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000020 	.word	0x20000020

08000598 <TIM_Init>:

void TIM_Init()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
	APB2_clock_enable(APB2_TIM1);
 800059e:	2000      	movs	r0, #0
 80005a0:	f7ff fe1a 	bl	80001d8 <APB2_clock_enable>
	uint16_t* TIM1_PSC  = (uint16_t*) (TIM1_BASE_ADDR + 0x28);
 80005a4:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <TIM_Init+0x60>)
 80005a6:	617b      	str	r3, [r7, #20]
	uint16_t* TIM1_DIER = (uint16_t*) (TIM1_BASE_ADDR + 0x0C);
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <TIM_Init+0x64>)
 80005aa:	613b      	str	r3, [r7, #16]
	uint16_t* TIM1_CR1  = (uint16_t*) (TIM1_BASE_ADDR + 0x00);
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <TIM_Init+0x68>)
 80005ae:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM1_ARR  = (uint16_t*) (TIM1_BASE_ADDR + 0x2C);
 80005b0:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <TIM_Init+0x6c>)
 80005b2:	60bb      	str	r3, [r7, #8]
	uint32_t* NVIC_ISER0 = (uint32_t*) (0xE000E100);
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <TIM_Init+0x70>)
 80005b6:	607b      	str	r3, [r7, #4]

	/* set CK_CNT = 1kHz */
	*TIM1_PSC = 32000 - 1;
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80005be:	801a      	strh	r2, [r3, #0]

	/* set auto-reload value */
	*TIM1_ARR = 1000;
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005c6:	801a      	strh	r2, [r3, #0]

	/* enable update interrupt */
	*TIM1_DIER |= 1 << 0;
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	801a      	strh	r2, [r3, #0]

	/* interrupt set-enable */
	*NVIC_ISER0 |= 1 << 25;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]

	/* enable counter */
	*TIM1_CR1 |= 1 << 0;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	801a      	strh	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40010028 	.word	0x40010028
 80005fc:	4001000c 	.word	0x4001000c
 8000600:	40010000 	.word	0x40010000
 8000604:	4001002c 	.word	0x4001002c
 8000608:	e000e100 	.word	0xe000e100

0800060c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800060c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000644 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000610:	f7ff ff6e 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	@ (8000648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	@ (800064c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	@ (8000650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	@ (8000654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	@ (8000658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063a:	f000 f825 	bl	8000688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800063e:	f7ff fea1 	bl	8000384 <main>
  bx  lr    
 8000642:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000650:	080006f0 	.word	0x080006f0
  ldr r2, =_sbss
 8000654:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000658:	20000028 	.word	0x20000028

0800065c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC_IRQHandler>
	...

08000660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <HAL_IncTick+0x20>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <HAL_IncTick+0x24>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <HAL_IncTick+0x24>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000
 8000684:	20000024 	.word	0x20000024

08000688 <__libc_init_array>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	4d0d      	ldr	r5, [pc, #52]	@ (80006c0 <__libc_init_array+0x38>)
 800068c:	4c0d      	ldr	r4, [pc, #52]	@ (80006c4 <__libc_init_array+0x3c>)
 800068e:	1b64      	subs	r4, r4, r5
 8000690:	10a4      	asrs	r4, r4, #2
 8000692:	2600      	movs	r6, #0
 8000694:	42a6      	cmp	r6, r4
 8000696:	d109      	bne.n	80006ac <__libc_init_array+0x24>
 8000698:	4d0b      	ldr	r5, [pc, #44]	@ (80006c8 <__libc_init_array+0x40>)
 800069a:	4c0c      	ldr	r4, [pc, #48]	@ (80006cc <__libc_init_array+0x44>)
 800069c:	f000 f818 	bl	80006d0 <_init>
 80006a0:	1b64      	subs	r4, r4, r5
 80006a2:	10a4      	asrs	r4, r4, #2
 80006a4:	2600      	movs	r6, #0
 80006a6:	42a6      	cmp	r6, r4
 80006a8:	d105      	bne.n	80006b6 <__libc_init_array+0x2e>
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b0:	4798      	blx	r3
 80006b2:	3601      	adds	r6, #1
 80006b4:	e7ee      	b.n	8000694 <__libc_init_array+0xc>
 80006b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ba:	4798      	blx	r3
 80006bc:	3601      	adds	r6, #1
 80006be:	e7f2      	b.n	80006a6 <__libc_init_array+0x1e>
 80006c0:	080006e8 	.word	0x080006e8
 80006c4:	080006e8 	.word	0x080006e8
 80006c8:	080006e8 	.word	0x080006e8
 80006cc:	080006ec 	.word	0x080006ec

080006d0 <_init>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	bf00      	nop
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr

080006dc <_fini>:
 80006dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006de:	bf00      	nop
 80006e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e2:	bc08      	pop	{r3}
 80006e4:	469e      	mov	lr, r3
 80006e6:	4770      	bx	lr
